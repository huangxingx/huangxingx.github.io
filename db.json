{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/go-micro 使用问题记录.md","hash":"704d5c3d11cb0226ae1ffc9468111d12c0e7f251","modified":1631083774490},{"_id":"source/_posts/golang 启动一个简单 http 代理.md","hash":"522331b0565a1b87cac67eb7421b16814cae916a","modified":1631082724016},{"_id":"source/_posts/git-常用命令.md","hash":"336e5565a493097734f52968511449598c29fb6d","modified":1631087813444},{"_id":"source/_posts/golang future 实现.md","hash":"b4b15d1640346a9407fcc0b659a34984671346fd","modified":1631086020245},{"_id":"source/_posts/http 状态码.md","hash":"c4af1c3cd3273c8cc75f75bacebe5a15bafe0841","modified":1631083322066},{"_id":"source/_posts/gorm 中使用 json.md","hash":"d61060c2cb3c178a50078a4d1db65a033aaba94e","modified":1631084282230},{"_id":"source/_posts/golang 生成随机字符串.md","hash":"448c550d9e44fe501923e875cfc32b1566cede72","modified":1631083385831},{"_id":"source/_posts/markdown 语法简介.md","hash":"b147f20b1d117da188e1da604dee9b0b8bdc0f01","modified":1631084381801},{"_id":"source/_posts/网站收藏.md","hash":"235c2a3997d9214bb9561da34b7693b69a7dd633","modified":1631090674211},{"_id":"source/_posts/redis-详解.md","hash":"3a66439ad173928f8eeea8ca8c845800142ffe6c","modified":1631088039745},{"_id":"source/_posts/mysql 距离函数 st_distance 使用.md","hash":"923d7c1a8253a0ecbfbe9508d4e449e55e7ec2bf","modified":1631084392259},{"_id":"source/golang/index.md","hash":"0fd1f2e24bdf7a42355a29954547f1f151233c6f","modified":1631005303419},{"_id":"source/_posts/python 正则表达式简介.md","hash":"1dddaab975c69b2c01ffaac6ca3f5f6cf1ea8f89","modified":1631084467999},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1631002167360},{"_id":"themes/3-hexo/_config.yml","hash":"2f71b698dd6bd57611871e5267509438158bd654","modified":1631085066114},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1631002167355},{"_id":"themes/3-hexo/README.md","hash":"d2c42534ceabcb7cd2e58ed994bf7d6f734d1f3b","modified":1631002167356},{"_id":"themes/3-hexo/layout/index.ejs","hash":"27ea3dac053d501b79bbef5117b4f3aff063d8cd","modified":1631002167360},{"_id":"themes/3-hexo/layout/indexs.md","hash":"4cbffa8b80e666120d67f1a2a134d2417d368e6b","modified":1631005508036},{"_id":"themes/3-hexo/layout/post.ejs","hash":"4abd16c0f5e3f51103d23b73710d695dc7fdc5d2","modified":1631002167360},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"59a4abd36cc8ff2107f1fcb3c0fe48d0492c9030","modified":1631002167368},{"_id":"themes/3-hexo/source/css/style.styl","hash":"7090b81f34e26172670c68da6a366ca186523779","modified":1631002167368},{"_id":"themes/3-hexo/languages/en.yml","hash":"53ae29ae1237fc7822df85a6d2f8da6f0078625e","modified":1631002958536},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"d2c6d86fe2ff03e6ee9bbc16dff8efe5b47ac297","modified":1631002695474},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"3f43f4b7b03cd14fcd2769d57336b0b4edf41f85","modified":1631084745985},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1631002167369},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1631002167365},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1631002167369},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1631002167370},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1631002167370},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1631002167370},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1631002167375},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1631002167376},{"_id":"themes/3-hexo/source/js/script.js","hash":"d7efd27ade371c6e50d0d7481ffc0ec47018bad2","modified":1631002167376},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1631002167376},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"516844c4a0e13d6773f6029849f51c59613b6f69","modified":1631002167356},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"0ebb17d001cb7bb7606c616c380049a2e7124496","modified":1631002167357},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1631002167357},{"_id":"themes/3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1631002167376},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"f66939a8c9d5258948b47842b8b4495e6ec45988","modified":1631002167358},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"bc94eee27701b67d238f328737b578e8270989eb","modified":1631002167358},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"ed479aa9affee3b02a76da06de45a7c40a97a706","modified":1631002167358},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"d11092791e5c140ff81f2aefa0d1b051f403239d","modified":1631002167359},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"a734c26d86da6697003ed27672c1b9b82b216c82","modified":1631002167359},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"d0b84370ca81c3baa02a05613ff040003acd2985","modified":1631002167359},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1631002167359},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"8a9e93f9cbe80763264018290da0b14b4bbe8ac5","modified":1631002167359},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"295f5d00a69c434d63db6e4576535ac5b4c26eac","modified":1631002167359},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"2a9b5ffb759be85545a89f6d1194579a800f51a5","modified":1631002167361},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1631002167361},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1631002167361},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"0e7de3e614ca49fe1c7420f233bea22e02641272","modified":1631002167359},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"c68d6942ed62f9cce8a9042f5a59055a0ee5441c","modified":1631002167361},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"0143711c1221cb4e70a3db866754d79c8a81d253","modified":1631002167361},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"ece1ad4ad58035abf2290836a4eeb165b8edf5e3","modified":1631002167361},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"3cf8ba0c6112dfa8089603b8df3e31f70a272715","modified":1631002167360},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1631002167362},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"44bdb1fe3e75996f24f2656770d6a376330e898d","modified":1631002167362},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1631002167362},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"0dd8d208081b92e05d6db3361743c520a2816828","modified":1631002167362},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1631002167360},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1631002167363},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1631002167362},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1631002167363},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1631002167363},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1631002167363},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1631002167364},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1631002167364},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1631002167364},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1631002167366},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1631002167364},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1631002167366},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1631002167366},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1631002167365},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1631002167366},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1631002167366},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1631002167366},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1631002167366},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1631002167367},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1631002167367},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1631002167367},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1631002167367},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1631002167367},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1631002167367},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1631002167367},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1631002167367},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1631002167368},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1631002167357},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1631002167357},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1631002167357},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1631002167357},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"e820aa16b5ed4e024616b5e2d424925820d43e56","modified":1631002167358},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"c76773b96860940083baf16470b7b80ac098e645","modified":1631002167358},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1631002167371},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1631002167375},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"a75ead28e6a1fab2a006cc7332ca2d2e868ce8e1","modified":1631002167374}],"Category":[{"name":"git","_id":"cktb9cf9r0003lusxd10zfctn"},{"name":"golang","_id":"cktb9cf9v0008lusxbsx5cbsr"},{"name":"gorm","parent":"cktb9cf9v0008lusxbsx5cbsr","_id":"cktb9cfa5000qlusxagfg5qxe"},{"name":"go-micro","parent":"cktb9cf9v0008lusxbsx5cbsr","_id":"cktb9cfa6000vlusx4sbtc8xw"},{"name":"web","_id":"cktb9cfa70010lusx39f6g2f0"},{"name":"markdown","_id":"cktb9cfa80016lusx96tu4wqs"},{"name":"mysql","_id":"cktb9cfa9001alusx82bb4fd0"},{"name":"python","_id":"cktb9cfaa001elusx9uf5aamo"},{"name":"site","_id":"cktb9cfaa001hlusxg1fs7gcy"},{"name":"http","parent":"cktb9cfa70010lusx39f6g2f0","_id":"cktb9cfab001mlusx90j884et"},{"name":"api","parent":"cktb9cfa80016lusx96tu4wqs","_id":"cktb9cfac001plusxc5u7hm6m"},{"name":"function","parent":"cktb9cfa9001alusx82bb4fd0","_id":"cktb9cfad001ulusx6zwgh857"},{"name":"regex","parent":"cktb9cfaa001elusx9uf5aamo","_id":"cktb9cfae001ylusxcx2bdksl"}],"Data":[],"Page":[{"title":"golang","date":"2021-09-07T09:01:08.000Z","_content":"\n### This Is Golang Page","source":"golang/index.md","raw":"---\ntitle: golang\ndate: 2021-09-07 17:01:08\n---\n\n### This Is Golang Page","updated":"2021-09-07T09:01:43.419Z","path":"golang/index.html","comments":1,"layout":"page","_id":"cktb9cf9k0000lusxg2bu3n39","content":"<h3 id=\"This-Is-Golang-Page\"><a href=\"#This-Is-Golang-Page\" class=\"headerlink\" title=\"This Is Golang Page\"></a>This Is Golang Page</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"This-Is-Golang-Page\"><a href=\"#This-Is-Golang-Page\" class=\"headerlink\" title=\"This Is Golang Page\"></a>This Is Golang Page</h3>"}],"Post":[{"title":"git 常用命令","auto_excerpt":{"enable":true,"length":150},"date":"2021-09-08T07:43:04.000Z","_content":"\n**git pull**\n\n**git push** \n\n**git checkout <branch>**\n\n```shell\n# 切换分支到本地 develop 分支\ngit checkout develop\n\n# 从当前分支新建一个分支 develop，并切换到 develop 分支\ngit checkout -b develop \n```\n\n**git status**\n\n**git log**\n\n**git stash**\n\n**git branch**\n\n**git rebase**\n\n```shell\n# 变基到两个提交之前\ngit rebase -i HEAD~2\n```\n\n**git submodule**\n\n```shell\n# 所有子模块执行 git reset --hard\ngit submodule foreach --recursive git reset --hard\n\n# 更新子模块\ngit submodule  update --init \t\ngit submodule  update --remote\n\n```\n\n","source":"_posts/git-常用命令.md","raw":"---\ntitle: git 常用命令\ntags:\n  - git\ncategories:\n  - git\nauto_excerpt:\n  enable: true\n  length: 150\ndate: 2021-09-08 15:43:04\n---\n\n**git pull**\n\n**git push** \n\n**git checkout <branch>**\n\n```shell\n# 切换分支到本地 develop 分支\ngit checkout develop\n\n# 从当前分支新建一个分支 develop，并切换到 develop 分支\ngit checkout -b develop \n```\n\n**git status**\n\n**git log**\n\n**git stash**\n\n**git branch**\n\n**git rebase**\n\n```shell\n# 变基到两个提交之前\ngit rebase -i HEAD~2\n```\n\n**git submodule**\n\n```shell\n# 所有子模块执行 git reset --hard\ngit submodule foreach --recursive git reset --hard\n\n# 更新子模块\ngit submodule  update --init \t\ngit submodule  update --remote\n\n```\n\n","slug":"git-常用命令","published":1,"updated":"2021-09-08T07:56:53.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cf9n0001lusxfsp6dqdk","content":"<p><strong>git pull</strong></p>\n<p><strong>git push</strong> </p>\n<p><strong>git checkout <branch></strong></p>\n<pre><code class=\"shell\"># 切换分支到本地 develop 分支\ngit checkout develop\n\n# 从当前分支新建一个分支 develop，并切换到 develop 分支\ngit checkout -b develop \n</code></pre>\n<p><strong>git status</strong></p>\n<p><strong>git log</strong></p>\n<p><strong>git stash</strong></p>\n<p><strong>git branch</strong></p>\n<p><strong>git rebase</strong></p>\n<pre><code class=\"shell\"># 变基到两个提交之前\ngit rebase -i HEAD~2\n</code></pre>\n<p><strong>git submodule</strong></p>\n<pre><code class=\"shell\"># 所有子模块执行 git reset --hard\ngit submodule foreach --recursive git reset --hard\n\n# 更新子模块\ngit submodule  update --init     \ngit submodule  update --remote\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>git pull</strong></p>\n<p><strong>git push</strong> </p>\n<p><strong>git checkout <branch></strong></p>\n<pre><code class=\"shell\"># 切换分支到本地 develop 分支\ngit checkout develop\n\n# 从当前分支新建一个分支 develop，并切换到 develop 分支\ngit checkout -b develop \n</code></pre>\n<p><strong>git status</strong></p>\n<p><strong>git log</strong></p>\n<p><strong>git stash</strong></p>\n<p><strong>git branch</strong></p>\n<p><strong>git rebase</strong></p>\n<pre><code class=\"shell\"># 变基到两个提交之前\ngit rebase -i HEAD~2\n</code></pre>\n<p><strong>git submodule</strong></p>\n<pre><code class=\"shell\"># 所有子模块执行 git reset --hard\ngit submodule foreach --recursive git reset --hard\n\n# 更新子模块\ngit submodule  update --init     \ngit submodule  update --remote\n</code></pre>\n"},{"title":"go-micro 使用问题记录","date":"2019-11-05T10:30:57.000Z","auto_excerpt":{"enable":true,"length":150},"_content":"\n### 1. micro@v1.14 之后使用 consul 作为注册中心问题\nmicro@v1.14 之后更换了默认的注册中心，把 consul 换成了 etcd ，如果需要使用 consul 作为注册中心，\n需要重新编译 micro。\n\n1. clone 源码：\n\n```shell\ngit clone https://github.com/micro/micro.git \n```\n\n2. 切到源码目录并新增 plugins.go :\n\n```shell\ncd micro源码目录 vi plugins.go\n```\n\n```golang\npackage main\n\nimport (\n\t_ \"github.com/micro/go-plugins/registry/consul\"\n)\n```\n\n3. 编译\n\n```shell\ngo build -o mainWithConsul main.go plugins.go \n```\n\n4. 运行\n\n```shell\n ./mainWithConsul --registry=consul api \n```\n\n### 2. micro 用 gin 作为 api 问题\n用 gin 做为 gin-api 服务时， 通过 *micro new --type web* 创建一个服务出来，注意修改服务的 name，改为 *com.example.api.ServiceName*,\n且在 gin router 中创建：\n\n```golang\nrouter := gin.Default()\nr := router.Group(\"/ServiceName\")\n\n```\n```shell\nmicro api --namespace=com.example.api\n```\n\n启动 这里必须要加 api 不然转发不了\n\n### 3. 使用 micro new 生成模板\n\n使用 micro new 生成模板， RegisterSubscriber 的 topic 名称和 service name 一样，导致大概50%的概率出现请求失败问题.\n\n**解决方法:**  注释 RegisterSubscriber 部分代码，或者换一个 topic 名称。\n","source":"_posts/go-micro 使用问题记录.md","raw":"---\ntitle: go-micro 使用问题记录\ndate: 2019-11-05 18:30:57\ntags:\n- golang\n- go-micro\n- 微服务\n- 注意事项\n\ncategories:\n- golang\n- go-micro\n\nauto_excerpt:\n  enable: true\n  length: 150\n---\n\n### 1. micro@v1.14 之后使用 consul 作为注册中心问题\nmicro@v1.14 之后更换了默认的注册中心，把 consul 换成了 etcd ，如果需要使用 consul 作为注册中心，\n需要重新编译 micro。\n\n1. clone 源码：\n\n```shell\ngit clone https://github.com/micro/micro.git \n```\n\n2. 切到源码目录并新增 plugins.go :\n\n```shell\ncd micro源码目录 vi plugins.go\n```\n\n```golang\npackage main\n\nimport (\n\t_ \"github.com/micro/go-plugins/registry/consul\"\n)\n```\n\n3. 编译\n\n```shell\ngo build -o mainWithConsul main.go plugins.go \n```\n\n4. 运行\n\n```shell\n ./mainWithConsul --registry=consul api \n```\n\n### 2. micro 用 gin 作为 api 问题\n用 gin 做为 gin-api 服务时， 通过 *micro new --type web* 创建一个服务出来，注意修改服务的 name，改为 *com.example.api.ServiceName*,\n且在 gin router 中创建：\n\n```golang\nrouter := gin.Default()\nr := router.Group(\"/ServiceName\")\n\n```\n```shell\nmicro api --namespace=com.example.api\n```\n\n启动 这里必须要加 api 不然转发不了\n\n### 3. 使用 micro new 生成模板\n\n使用 micro new 生成模板， RegisterSubscriber 的 topic 名称和 service name 一样，导致大概50%的概率出现请求失败问题.\n\n**解决方法:**  注释 RegisterSubscriber 部分代码，或者换一个 topic 名称。\n","slug":"go-micro 使用问题记录","published":1,"updated":"2021-09-08T06:49:34.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cf9q0002lusx7kkk3jb9","content":"<h3 id=\"1-109-105-x63-114-x6f-64-118-x31-46-x31-x34-之后使用-consul-作为注册中心问题\"><a href=\"#1-109-105-x63-114-x6f-64-118-x31-46-x31-x34-之后使用-consul-作为注册中心问题\" class=\"headerlink\" title=\"1. &#109;&#105;&#x63;&#114;&#x6f;&#64;&#118;&#x31;&#46;&#x31;&#x34; 之后使用 consul 作为注册中心问题\"></a>1. <a href=\"mailto:&#109;&#105;&#x63;&#114;&#x6f;&#64;&#118;&#x31;&#46;&#x31;&#x34;\">&#109;&#105;&#x63;&#114;&#x6f;&#64;&#118;&#x31;&#46;&#x31;&#x34;</a> 之后使用 consul 作为注册中心问题</h3><p><a href=\"mailto:&#109;&#105;&#x63;&#x72;&#111;&#x40;&#x76;&#49;&#x2e;&#x31;&#x34;\">&#109;&#105;&#x63;&#x72;&#111;&#x40;&#x76;&#49;&#x2e;&#x31;&#x34;</a> 之后更换了默认的注册中心，把 consul 换成了 etcd ，如果需要使用 consul 作为注册中心，<br>需要重新编译 micro。</p>\n<ol>\n<li>clone 源码：</li>\n</ol>\n<pre><code class=\"shell\">git clone https://github.com/micro/micro.git \n</code></pre>\n<ol start=\"2\">\n<li>切到源码目录并新增 plugins.go :</li>\n</ol>\n<pre><code class=\"shell\">cd micro源码目录 vi plugins.go\n</code></pre>\n<pre><code class=\"golang\">package main\n\nimport (\n    _ &quot;github.com/micro/go-plugins/registry/consul&quot;\n)\n</code></pre>\n<ol start=\"3\">\n<li>编译</li>\n</ol>\n<pre><code class=\"shell\">go build -o mainWithConsul main.go plugins.go \n</code></pre>\n<ol start=\"4\">\n<li>运行</li>\n</ol>\n<pre><code class=\"shell\"> ./mainWithConsul --registry=consul api \n</code></pre>\n<h3 id=\"2-micro-用-gin-作为-api-问题\"><a href=\"#2-micro-用-gin-作为-api-问题\" class=\"headerlink\" title=\"2. micro 用 gin 作为 api 问题\"></a>2. micro 用 gin 作为 api 问题</h3><p>用 gin 做为 gin-api 服务时， 通过 <em>micro new –type web</em> 创建一个服务出来，注意修改服务的 name，改为 <em>com.example.api.ServiceName</em>,<br>且在 gin router 中创建：</p>\n<pre><code class=\"golang\">router := gin.Default()\nr := router.Group(&quot;/ServiceName&quot;)\n</code></pre>\n<pre><code class=\"shell\">micro api --namespace=com.example.api\n</code></pre>\n<p>启动 这里必须要加 api 不然转发不了</p>\n<h3 id=\"3-使用-micro-new-生成模板\"><a href=\"#3-使用-micro-new-生成模板\" class=\"headerlink\" title=\"3. 使用 micro new 生成模板\"></a>3. 使用 micro new 生成模板</h3><p>使用 micro new 生成模板， RegisterSubscriber 的 topic 名称和 service name 一样，导致大概50%的概率出现请求失败问题.</p>\n<p><strong>解决方法:</strong>  注释 RegisterSubscriber 部分代码，或者换一个 topic 名称。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-109-105-x63-114-x6f-64-118-x31-46-x31-x34-之后使用-consul-作为注册中心问题\"><a href=\"#1-109-105-x63-114-x6f-64-118-x31-46-x31-x34-之后使用-consul-作为注册中心问题\" class=\"headerlink\" title=\"1. &#109;&#105;&#x63;&#114;&#x6f;&#64;&#118;&#x31;&#46;&#x31;&#x34; 之后使用 consul 作为注册中心问题\"></a>1. <a href=\"mailto:&#109;&#105;&#x63;&#114;&#x6f;&#64;&#118;&#x31;&#46;&#x31;&#x34;\">&#109;&#105;&#x63;&#114;&#x6f;&#64;&#118;&#x31;&#46;&#x31;&#x34;</a> 之后使用 consul 作为注册中心问题</h3><p><a href=\"mailto:&#109;&#105;&#x63;&#x72;&#111;&#x40;&#x76;&#49;&#x2e;&#x31;&#x34;\">&#109;&#105;&#x63;&#x72;&#111;&#x40;&#x76;&#49;&#x2e;&#x31;&#x34;</a> 之后更换了默认的注册中心，把 consul 换成了 etcd ，如果需要使用 consul 作为注册中心，<br>需要重新编译 micro。</p>\n<ol>\n<li>clone 源码：</li>\n</ol>\n<pre><code class=\"shell\">git clone https://github.com/micro/micro.git \n</code></pre>\n<ol start=\"2\">\n<li>切到源码目录并新增 plugins.go :</li>\n</ol>\n<pre><code class=\"shell\">cd micro源码目录 vi plugins.go\n</code></pre>\n<pre><code class=\"golang\">package main\n\nimport (\n    _ &quot;github.com/micro/go-plugins/registry/consul&quot;\n)\n</code></pre>\n<ol start=\"3\">\n<li>编译</li>\n</ol>\n<pre><code class=\"shell\">go build -o mainWithConsul main.go plugins.go \n</code></pre>\n<ol start=\"4\">\n<li>运行</li>\n</ol>\n<pre><code class=\"shell\"> ./mainWithConsul --registry=consul api \n</code></pre>\n<h3 id=\"2-micro-用-gin-作为-api-问题\"><a href=\"#2-micro-用-gin-作为-api-问题\" class=\"headerlink\" title=\"2. micro 用 gin 作为 api 问题\"></a>2. micro 用 gin 作为 api 问题</h3><p>用 gin 做为 gin-api 服务时， 通过 <em>micro new –type web</em> 创建一个服务出来，注意修改服务的 name，改为 <em>com.example.api.ServiceName</em>,<br>且在 gin router 中创建：</p>\n<pre><code class=\"golang\">router := gin.Default()\nr := router.Group(&quot;/ServiceName&quot;)\n</code></pre>\n<pre><code class=\"shell\">micro api --namespace=com.example.api\n</code></pre>\n<p>启动 这里必须要加 api 不然转发不了</p>\n<h3 id=\"3-使用-micro-new-生成模板\"><a href=\"#3-使用-micro-new-生成模板\" class=\"headerlink\" title=\"3. 使用 micro new 生成模板\"></a>3. 使用 micro new 生成模板</h3><p>使用 micro new 生成模板， RegisterSubscriber 的 topic 名称和 service name 一样，导致大概50%的概率出现请求失败问题.</p>\n<p><strong>解决方法:</strong>  注释 RegisterSubscriber 部分代码，或者换一个 topic 名称。</p>\n"},{"title":"golang future 实现","date":"2019-06-06T07:16:40.000Z","_content":"\n实现如下\n\n```golang\npackage utils\n\nimport (\n    \"sync\"\n    \"time\"\n)\n\n// Future \ntype Future struct {\n    isfinished bool\n    result     interface{}\n    resultchan chan interface{}\n    l          sync.Mutex\n}\n\n// GetResult get return value\nfunc (f *Future) GetResult() interface{} {\n    f.l.Lock()\n    defer f.l.Unlock()\n    if f.isfinished {\n        return f.result\n    }\n\n    select {\n    // timeout\n    case <-time.Tick(time.Second * 6):\n        f.isfinished = true\n        f.result = nil\n        return nil\n    case f.result = <-f.resultchan:\n        f.isfinished = true\n        return f.result\n    }\n}\n\n// SetResult set return value\nfunc (f *Future) SetResult(result interface{}) {\n    if f.isfinished == true {\n        return\n    }\n    f.resultchan <- result\n    close(f.resultchan)\n}\n\n// NewFuture init Future\nfunc NewFuture() *Future {\n    return &Future{\n        isfinished: false,\n        result:     nil,\n        resultchan: make(chan interface{}, 1),\n    }\n}\n```\n\n调用\n\n```golang\n/*\nFuture 是一个未来的任务的抽象。和python里的那个有点类似。\n在异步任务中SetResult，在GetResult的时候会等待result生成，或者超时。\n*/\n\ntasks := make([]*utils.Future, 0)\nfor i := 0; i < 10; i++ {\n    future := utils.NewFuture()\n    tasks = append(tasks, future)\n    go func(result int) {\n        time.Sleep(time.Second * time.Duration(rand.Int63n(10)))\n        future.SetResult(result)\n    }(i)\n}\n\nfor _, item := range tasks {\n    ret, ok := item.GetResult().(int)\n    if ok {\n        fmt.Println(ret)\n    } else {\n        fmt.Println(\"failed\")\n    }\n}\n```\n\n","source":"_posts/golang future 实现.md","raw":"---\ntitle: golang future 实现\ndate: 2019-06-06 15:16:40\ntags: \n- golang\n- future\n\ncategories:\n- golang\n---\n\n实现如下\n\n```golang\npackage utils\n\nimport (\n    \"sync\"\n    \"time\"\n)\n\n// Future \ntype Future struct {\n    isfinished bool\n    result     interface{}\n    resultchan chan interface{}\n    l          sync.Mutex\n}\n\n// GetResult get return value\nfunc (f *Future) GetResult() interface{} {\n    f.l.Lock()\n    defer f.l.Unlock()\n    if f.isfinished {\n        return f.result\n    }\n\n    select {\n    // timeout\n    case <-time.Tick(time.Second * 6):\n        f.isfinished = true\n        f.result = nil\n        return nil\n    case f.result = <-f.resultchan:\n        f.isfinished = true\n        return f.result\n    }\n}\n\n// SetResult set return value\nfunc (f *Future) SetResult(result interface{}) {\n    if f.isfinished == true {\n        return\n    }\n    f.resultchan <- result\n    close(f.resultchan)\n}\n\n// NewFuture init Future\nfunc NewFuture() *Future {\n    return &Future{\n        isfinished: false,\n        result:     nil,\n        resultchan: make(chan interface{}, 1),\n    }\n}\n```\n\n调用\n\n```golang\n/*\nFuture 是一个未来的任务的抽象。和python里的那个有点类似。\n在异步任务中SetResult，在GetResult的时候会等待result生成，或者超时。\n*/\n\ntasks := make([]*utils.Future, 0)\nfor i := 0; i < 10; i++ {\n    future := utils.NewFuture()\n    tasks = append(tasks, future)\n    go func(result int) {\n        time.Sleep(time.Second * time.Duration(rand.Int63n(10)))\n        future.SetResult(result)\n    }(i)\n}\n\nfor _, item := range tasks {\n    ret, ok := item.GetResult().(int)\n    if ok {\n        fmt.Println(ret)\n    } else {\n        fmt.Println(\"failed\")\n    }\n}\n```\n\n","slug":"golang future 实现","published":1,"updated":"2021-09-08T07:27:00.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cf9t0005lusx3i1y0wd5","content":"<p>实现如下</p>\n<pre><code class=\"golang\">package utils\n\nimport (\n    &quot;sync&quot;\n    &quot;time&quot;\n)\n\n// Future \ntype Future struct &#123;\n    isfinished bool\n    result     interface&#123;&#125;\n    resultchan chan interface&#123;&#125;\n    l          sync.Mutex\n&#125;\n\n// GetResult get return value\nfunc (f *Future) GetResult() interface&#123;&#125; &#123;\n    f.l.Lock()\n    defer f.l.Unlock()\n    if f.isfinished &#123;\n        return f.result\n    &#125;\n\n    select &#123;\n    // timeout\n    case &lt;-time.Tick(time.Second * 6):\n        f.isfinished = true\n        f.result = nil\n        return nil\n    case f.result = &lt;-f.resultchan:\n        f.isfinished = true\n        return f.result\n    &#125;\n&#125;\n\n// SetResult set return value\nfunc (f *Future) SetResult(result interface&#123;&#125;) &#123;\n    if f.isfinished == true &#123;\n        return\n    &#125;\n    f.resultchan &lt;- result\n    close(f.resultchan)\n&#125;\n\n// NewFuture init Future\nfunc NewFuture() *Future &#123;\n    return &amp;Future&#123;\n        isfinished: false,\n        result:     nil,\n        resultchan: make(chan interface&#123;&#125;, 1),\n    &#125;\n&#125;\n</code></pre>\n<p>调用</p>\n<pre><code class=\"golang\">/*\nFuture 是一个未来的任务的抽象。和python里的那个有点类似。\n在异步任务中SetResult，在GetResult的时候会等待result生成，或者超时。\n*/\n\ntasks := make([]*utils.Future, 0)\nfor i := 0; i &lt; 10; i++ &#123;\n    future := utils.NewFuture()\n    tasks = append(tasks, future)\n    go func(result int) &#123;\n        time.Sleep(time.Second * time.Duration(rand.Int63n(10)))\n        future.SetResult(result)\n    &#125;(i)\n&#125;\n\nfor _, item := range tasks &#123;\n    ret, ok := item.GetResult().(int)\n    if ok &#123;\n        fmt.Println(ret)\n    &#125; else &#123;\n        fmt.Println(&quot;failed&quot;)\n    &#125;\n&#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>实现如下</p>\n<pre><code class=\"golang\">package utils\n\nimport (\n    &quot;sync&quot;\n    &quot;time&quot;\n)\n\n// Future \ntype Future struct &#123;\n    isfinished bool\n    result     interface&#123;&#125;\n    resultchan chan interface&#123;&#125;\n    l          sync.Mutex\n&#125;\n\n// GetResult get return value\nfunc (f *Future) GetResult() interface&#123;&#125; &#123;\n    f.l.Lock()\n    defer f.l.Unlock()\n    if f.isfinished &#123;\n        return f.result\n    &#125;\n\n    select &#123;\n    // timeout\n    case &lt;-time.Tick(time.Second * 6):\n        f.isfinished = true\n        f.result = nil\n        return nil\n    case f.result = &lt;-f.resultchan:\n        f.isfinished = true\n        return f.result\n    &#125;\n&#125;\n\n// SetResult set return value\nfunc (f *Future) SetResult(result interface&#123;&#125;) &#123;\n    if f.isfinished == true &#123;\n        return\n    &#125;\n    f.resultchan &lt;- result\n    close(f.resultchan)\n&#125;\n\n// NewFuture init Future\nfunc NewFuture() *Future &#123;\n    return &amp;Future&#123;\n        isfinished: false,\n        result:     nil,\n        resultchan: make(chan interface&#123;&#125;, 1),\n    &#125;\n&#125;\n</code></pre>\n<p>调用</p>\n<pre><code class=\"golang\">/*\nFuture 是一个未来的任务的抽象。和python里的那个有点类似。\n在异步任务中SetResult，在GetResult的时候会等待result生成，或者超时。\n*/\n\ntasks := make([]*utils.Future, 0)\nfor i := 0; i &lt; 10; i++ &#123;\n    future := utils.NewFuture()\n    tasks = append(tasks, future)\n    go func(result int) &#123;\n        time.Sleep(time.Second * time.Duration(rand.Int63n(10)))\n        future.SetResult(result)\n    &#125;(i)\n&#125;\n\nfor _, item := range tasks &#123;\n    ret, ok := item.GetResult().(int)\n    if ok &#123;\n        fmt.Println(ret)\n    &#125; else &#123;\n        fmt.Println(&quot;failed&quot;)\n    &#125;\n&#125;\n</code></pre>\n"},{"title":"golang 启动一个简单 http 代理","date":"2020-05-08T03:30:57.000Z","_content":"\n## golang 转发 http 请求\n\n\n```golang\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"net/url\"\n)\n\n//将request转发给 http://127.0.0.1:2003\nfunc proxyHandler(w http.ResponseWriter, r *http.Request) {\n\n\ttrueServer := \"http://127.0.0.1:15672\"\n\n\turl, err := url.Parse(trueServer)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\n\tproxy := httputil.NewSingleHostReverseProxy(url)\n\tproxy.ServeHTTP(w, r)\n\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", proxyHandler)\n\tlog.Fatal(http.ListenAndServe(\":2002\", nil))\n}\n\n```\n","source":"_posts/golang 启动一个简单 http 代理.md","raw":"---\ntitle: golang 启动一个简单 http 代理\ndate: 2020-05-08 11:30:57\ntags: \n- golang\n- http\n\ncategories:\n- golang\n---\n\n## golang 转发 http 请求\n\n\n```golang\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"net/url\"\n)\n\n//将request转发给 http://127.0.0.1:2003\nfunc proxyHandler(w http.ResponseWriter, r *http.Request) {\n\n\ttrueServer := \"http://127.0.0.1:15672\"\n\n\turl, err := url.Parse(trueServer)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\n\tproxy := httputil.NewSingleHostReverseProxy(url)\n\tproxy.ServeHTTP(w, r)\n\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", proxyHandler)\n\tlog.Fatal(http.ListenAndServe(\":2002\", nil))\n}\n\n```\n","slug":"golang 启动一个简单 http 代理","published":1,"updated":"2021-09-08T06:32:04.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cf9u0006lusx68m0den8","content":"<h2 id=\"golang-转发-http-请求\"><a href=\"#golang-转发-http-请求\" class=\"headerlink\" title=\"golang 转发 http 请求\"></a>golang 转发 http 请求</h2><pre><code class=\"golang\">package main\n\nimport (\n    &quot;log&quot;\n    &quot;net/http&quot;\n    &quot;net/http/httputil&quot;\n    &quot;net/url&quot;\n)\n\n//将request转发给 http://127.0.0.1:2003\nfunc proxyHandler(w http.ResponseWriter, r *http.Request) &#123;\n\n    trueServer := &quot;http://127.0.0.1:15672&quot;\n\n    url, err := url.Parse(trueServer)\n    if err != nil &#123;\n        log.Println(err)\n        return\n    &#125;\n\n    proxy := httputil.NewSingleHostReverseProxy(url)\n    proxy.ServeHTTP(w, r)\n\n&#125;\n\nfunc main() &#123;\n    http.HandleFunc(&quot;/&quot;, proxyHandler)\n    log.Fatal(http.ListenAndServe(&quot;:2002&quot;, nil))\n&#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"golang-转发-http-请求\"><a href=\"#golang-转发-http-请求\" class=\"headerlink\" title=\"golang 转发 http 请求\"></a>golang 转发 http 请求</h2><pre><code class=\"golang\">package main\n\nimport (\n    &quot;log&quot;\n    &quot;net/http&quot;\n    &quot;net/http/httputil&quot;\n    &quot;net/url&quot;\n)\n\n//将request转发给 http://127.0.0.1:2003\nfunc proxyHandler(w http.ResponseWriter, r *http.Request) &#123;\n\n    trueServer := &quot;http://127.0.0.1:15672&quot;\n\n    url, err := url.Parse(trueServer)\n    if err != nil &#123;\n        log.Println(err)\n        return\n    &#125;\n\n    proxy := httputil.NewSingleHostReverseProxy(url)\n    proxy.ServeHTTP(w, r)\n\n&#125;\n\nfunc main() &#123;\n    http.HandleFunc(&quot;/&quot;, proxyHandler)\n    log.Fatal(http.ListenAndServe(&quot;:2002&quot;, nil))\n&#125;\n</code></pre>\n"},{"title":"golang 生成随机字符串","date":"2019-06-13T07:41:22.000Z","_content":"\n### 随机字符串\n\n```go\n\n//RandomStr 随机生成字符串\nfunc RandomStr(length int) string {\n\tstr := \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\tbytes := []byte(str)\n\tresult := []byte{}\n\tr := rand.New(rand.NewSource(time.Now().UnixNano()))\n\tfor i := 0; i < length; i++ {\n\t\tresult = append(result, bytes[r.Intn(len(bytes))])\n\t}\n\treturn string(result)\n}\n```\n\n###  生成定长字符串\n\n\n```go\n//获得定长字符串\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenString(str string, length int, char byte) string {\n\tif len(str) == 0 {\n\t\treturn \"\"\n\t}\n\n\tif len(str) == length {\n\t\treturn str\n\t}\n\n\t//超出切后面\n\tif len(str) > length {\n\t\treturn string(str[:length])\n\t}\n\n\t//缺少添加char\n\tif len(str) < length {\n\t\tslice := make([]byte, length-len(str))\n\t\tfor k := range slice {\n\t\t\tslice[k] = char\n\t\t}\n\t\treturn string(append(slice, []byte(str)...))\n\t}\n\n\treturn \"\"\n}\n\n```\n### 获得定长byte slice\n```go\n//获得定长byte slice\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenByte(b []byte, length int, char byte) (tb []byte) {\n\tif len(b) == 0 {\n\t\treturn\n\t}\n\n\tif len(b) == length {\n\t\treturn b\n\t}\n\n\t//超出切后面\n\tif len(b) > length {\n\t\treturn b[:length]\n\t}\n\n\t//缺少添加char\n\tif len(b) < length {\n\t\tslice := make([]byte, length-len(b))\n\t\tfor k := range slice {\n\t\t\tslice[k] = char\n\t\t}\n\t\treturn append(slice, []byte(b)...)\n\t}\n\n\treturn\n}\n```\n\n### 生成随机验证码\n\n```golang\npackage main\n \nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"strings\"\n\t\"time\"\n)\n \nfunc GenValidateCode(width int) string {\n\tnumeric := [10]byte{0,1,2,3,4,5,6,7,8,9}\n\tr := len(numeric)\n\trand.Seed(time.Now().UnixNano())\n \n\tvar sb strings.Builder\n\tfor i := 0; i < width; i++ {\n\t\tfmt.Fprintf(&sb, \"%d\", numeric[ rand.Intn(r) ])\n\t}\n\treturn sb.String()\n}\n \nfunc main() {\n\tfmt.Println( GenValidateCode(6) )\n}\n\n```\n\n","source":"_posts/golang 生成随机字符串.md","raw":"---\ntitle: golang 生成随机字符串\ndate: 2019-06-13 15:41:22\ntags: \n- golang\n\ncategories:\n- golang\n\n---\n\n### 随机字符串\n\n```go\n\n//RandomStr 随机生成字符串\nfunc RandomStr(length int) string {\n\tstr := \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\tbytes := []byte(str)\n\tresult := []byte{}\n\tr := rand.New(rand.NewSource(time.Now().UnixNano()))\n\tfor i := 0; i < length; i++ {\n\t\tresult = append(result, bytes[r.Intn(len(bytes))])\n\t}\n\treturn string(result)\n}\n```\n\n###  生成定长字符串\n\n\n```go\n//获得定长字符串\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenString(str string, length int, char byte) string {\n\tif len(str) == 0 {\n\t\treturn \"\"\n\t}\n\n\tif len(str) == length {\n\t\treturn str\n\t}\n\n\t//超出切后面\n\tif len(str) > length {\n\t\treturn string(str[:length])\n\t}\n\n\t//缺少添加char\n\tif len(str) < length {\n\t\tslice := make([]byte, length-len(str))\n\t\tfor k := range slice {\n\t\t\tslice[k] = char\n\t\t}\n\t\treturn string(append(slice, []byte(str)...))\n\t}\n\n\treturn \"\"\n}\n\n```\n### 获得定长byte slice\n```go\n//获得定长byte slice\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenByte(b []byte, length int, char byte) (tb []byte) {\n\tif len(b) == 0 {\n\t\treturn\n\t}\n\n\tif len(b) == length {\n\t\treturn b\n\t}\n\n\t//超出切后面\n\tif len(b) > length {\n\t\treturn b[:length]\n\t}\n\n\t//缺少添加char\n\tif len(b) < length {\n\t\tslice := make([]byte, length-len(b))\n\t\tfor k := range slice {\n\t\t\tslice[k] = char\n\t\t}\n\t\treturn append(slice, []byte(b)...)\n\t}\n\n\treturn\n}\n```\n\n### 生成随机验证码\n\n```golang\npackage main\n \nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"strings\"\n\t\"time\"\n)\n \nfunc GenValidateCode(width int) string {\n\tnumeric := [10]byte{0,1,2,3,4,5,6,7,8,9}\n\tr := len(numeric)\n\trand.Seed(time.Now().UnixNano())\n \n\tvar sb strings.Builder\n\tfor i := 0; i < width; i++ {\n\t\tfmt.Fprintf(&sb, \"%d\", numeric[ rand.Intn(r) ])\n\t}\n\treturn sb.String()\n}\n \nfunc main() {\n\tfmt.Println( GenValidateCode(6) )\n}\n\n```\n\n","slug":"golang 生成随机字符串","published":1,"updated":"2021-09-08T06:43:05.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cf9v0007lusx9rd40ayc","content":"<h3 id=\"随机字符串\"><a href=\"#随机字符串\" class=\"headerlink\" title=\"随机字符串\"></a>随机字符串</h3><pre><code class=\"go\">\n//RandomStr 随机生成字符串\nfunc RandomStr(length int) string &#123;\n    str := &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;\n    bytes := []byte(str)\n    result := []byte&#123;&#125;\n    r := rand.New(rand.NewSource(time.Now().UnixNano()))\n    for i := 0; i &lt; length; i++ &#123;\n        result = append(result, bytes[r.Intn(len(bytes))])\n    &#125;\n    return string(result)\n&#125;\n</code></pre>\n<h3 id=\"生成定长字符串\"><a href=\"#生成定长字符串\" class=\"headerlink\" title=\"生成定长字符串\"></a>生成定长字符串</h3><pre><code class=\"go\">//获得定长字符串\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenString(str string, length int, char byte) string &#123;\n    if len(str) == 0 &#123;\n        return &quot;&quot;\n    &#125;\n\n    if len(str) == length &#123;\n        return str\n    &#125;\n\n    //超出切后面\n    if len(str) &gt; length &#123;\n        return string(str[:length])\n    &#125;\n\n    //缺少添加char\n    if len(str) &lt; length &#123;\n        slice := make([]byte, length-len(str))\n        for k := range slice &#123;\n            slice[k] = char\n        &#125;\n        return string(append(slice, []byte(str)...))\n    &#125;\n\n    return &quot;&quot;\n&#125;\n</code></pre>\n<h3 id=\"获得定长byte-slice\"><a href=\"#获得定长byte-slice\" class=\"headerlink\" title=\"获得定长byte slice\"></a>获得定长byte slice</h3><pre><code class=\"go\">//获得定长byte slice\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenByte(b []byte, length int, char byte) (tb []byte) &#123;\n    if len(b) == 0 &#123;\n        return\n    &#125;\n\n    if len(b) == length &#123;\n        return b\n    &#125;\n\n    //超出切后面\n    if len(b) &gt; length &#123;\n        return b[:length]\n    &#125;\n\n    //缺少添加char\n    if len(b) &lt; length &#123;\n        slice := make([]byte, length-len(b))\n        for k := range slice &#123;\n            slice[k] = char\n        &#125;\n        return append(slice, []byte(b)...)\n    &#125;\n\n    return\n&#125;\n</code></pre>\n<h3 id=\"生成随机验证码\"><a href=\"#生成随机验证码\" class=\"headerlink\" title=\"生成随机验证码\"></a>生成随机验证码</h3><pre><code class=\"golang\">package main\n \nimport (\n    &quot;fmt&quot;\n    &quot;math/rand&quot;\n    &quot;strings&quot;\n    &quot;time&quot;\n)\n \nfunc GenValidateCode(width int) string &#123;\n    numeric := [10]byte&#123;0,1,2,3,4,5,6,7,8,9&#125;\n    r := len(numeric)\n    rand.Seed(time.Now().UnixNano())\n \n    var sb strings.Builder\n    for i := 0; i &lt; width; i++ &#123;\n        fmt.Fprintf(&amp;sb, &quot;%d&quot;, numeric[ rand.Intn(r) ])\n    &#125;\n    return sb.String()\n&#125;\n \nfunc main() &#123;\n    fmt.Println( GenValidateCode(6) )\n&#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"随机字符串\"><a href=\"#随机字符串\" class=\"headerlink\" title=\"随机字符串\"></a>随机字符串</h3><pre><code class=\"go\">\n//RandomStr 随机生成字符串\nfunc RandomStr(length int) string &#123;\n    str := &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;\n    bytes := []byte(str)\n    result := []byte&#123;&#125;\n    r := rand.New(rand.NewSource(time.Now().UnixNano()))\n    for i := 0; i &lt; length; i++ &#123;\n        result = append(result, bytes[r.Intn(len(bytes))])\n    &#125;\n    return string(result)\n&#125;\n</code></pre>\n<h3 id=\"生成定长字符串\"><a href=\"#生成定长字符串\" class=\"headerlink\" title=\"生成定长字符串\"></a>生成定长字符串</h3><pre><code class=\"go\">//获得定长字符串\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenString(str string, length int, char byte) string &#123;\n    if len(str) == 0 &#123;\n        return &quot;&quot;\n    &#125;\n\n    if len(str) == length &#123;\n        return str\n    &#125;\n\n    //超出切后面\n    if len(str) &gt; length &#123;\n        return string(str[:length])\n    &#125;\n\n    //缺少添加char\n    if len(str) &lt; length &#123;\n        slice := make([]byte, length-len(str))\n        for k := range slice &#123;\n            slice[k] = char\n        &#125;\n        return string(append(slice, []byte(str)...))\n    &#125;\n\n    return &quot;&quot;\n&#125;\n</code></pre>\n<h3 id=\"获得定长byte-slice\"><a href=\"#获得定长byte-slice\" class=\"headerlink\" title=\"获得定长byte slice\"></a>获得定长byte slice</h3><pre><code class=\"go\">//获得定长byte slice\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenByte(b []byte, length int, char byte) (tb []byte) &#123;\n    if len(b) == 0 &#123;\n        return\n    &#125;\n\n    if len(b) == length &#123;\n        return b\n    &#125;\n\n    //超出切后面\n    if len(b) &gt; length &#123;\n        return b[:length]\n    &#125;\n\n    //缺少添加char\n    if len(b) &lt; length &#123;\n        slice := make([]byte, length-len(b))\n        for k := range slice &#123;\n            slice[k] = char\n        &#125;\n        return append(slice, []byte(b)...)\n    &#125;\n\n    return\n&#125;\n</code></pre>\n<h3 id=\"生成随机验证码\"><a href=\"#生成随机验证码\" class=\"headerlink\" title=\"生成随机验证码\"></a>生成随机验证码</h3><pre><code class=\"golang\">package main\n \nimport (\n    &quot;fmt&quot;\n    &quot;math/rand&quot;\n    &quot;strings&quot;\n    &quot;time&quot;\n)\n \nfunc GenValidateCode(width int) string &#123;\n    numeric := [10]byte&#123;0,1,2,3,4,5,6,7,8,9&#125;\n    r := len(numeric)\n    rand.Seed(time.Now().UnixNano())\n \n    var sb strings.Builder\n    for i := 0; i &lt; width; i++ &#123;\n        fmt.Fprintf(&amp;sb, &quot;%d&quot;, numeric[ rand.Intn(r) ])\n    &#125;\n    return sb.String()\n&#125;\n \nfunc main() &#123;\n    fmt.Println( GenValidateCode(6) )\n&#125;\n</code></pre>\n"},{"title":"gorm 中使用 json","date":"2019-06-11T08:55:56.000Z","_content":"\n### Json 类的实现\n\n```golang\npackage models\n\nimport (\n\t\"bytes\"\n\t\"database/sql/driver\"\n\t\"errors\"\n)\n\ntype JSON []byte\n\nfunc (j JSON) Value() (driver.Value, error) {\n\tif j.IsNull() {\n\t\treturn nil, nil\n\t}\n\treturn string(j), nil\n}\nfunc (j *JSON) Scan(value interface{}) error {\n\tif value == nil {\n\t\t*j = nil\n\t\treturn nil\n\t}\n\ts, ok := value.([]byte)\n\tif !ok {\n\t\terrors.New(\"Invalid Scan Source\")\n\t}\n\t*j = append((*j)[0:0], s...)\n\treturn nil\n}\nfunc (m JSON) MarshalJSON() ([]byte, error) {\n\tif m == nil {\n\t\treturn []byte(\"null\"), nil\n\t}\n\treturn m, nil\n}\nfunc (m *JSON) UnmarshalJSON(data []byte) error {\n\tif m == nil {\n\t\treturn errors.New(\"null point exception\")\n\t}\n\t*m = append((*m)[0:0], data...)\n\treturn nil\n}\nfunc (j JSON) IsNull() bool {\n\treturn len(j) == 0 || string(j) == \"null\"\n}\nfunc (j JSON) Equals(j1 JSON) bool {\n\treturn bytes.Equal([]byte(j), []byte(j1))\n}\n\n```\n\n### 在自定义 Model 中使用 Json Type\n\n```golang\npackage models\ntype Model struct {\n    ID        int   `gorm:\"primary_key\" json:\"id\"`\n    CreatedAt int64 `json:\"createdAt\"`\n    UpdatedAt int64 `json:\"updatedAt\"`\n    Object    JSON  `sql:\"type:json\" json:\"object,omitempty\"`\n}\n```\n\n","source":"_posts/gorm 中使用 json.md","raw":"---\ntitle: gorm 中使用 json\ndate: 2019-06-11 16:55:56\ntags:\n- golang\n- gorm\ncategories:\n- golang\n- gorm\n---\n\n### Json 类的实现\n\n```golang\npackage models\n\nimport (\n\t\"bytes\"\n\t\"database/sql/driver\"\n\t\"errors\"\n)\n\ntype JSON []byte\n\nfunc (j JSON) Value() (driver.Value, error) {\n\tif j.IsNull() {\n\t\treturn nil, nil\n\t}\n\treturn string(j), nil\n}\nfunc (j *JSON) Scan(value interface{}) error {\n\tif value == nil {\n\t\t*j = nil\n\t\treturn nil\n\t}\n\ts, ok := value.([]byte)\n\tif !ok {\n\t\terrors.New(\"Invalid Scan Source\")\n\t}\n\t*j = append((*j)[0:0], s...)\n\treturn nil\n}\nfunc (m JSON) MarshalJSON() ([]byte, error) {\n\tif m == nil {\n\t\treturn []byte(\"null\"), nil\n\t}\n\treturn m, nil\n}\nfunc (m *JSON) UnmarshalJSON(data []byte) error {\n\tif m == nil {\n\t\treturn errors.New(\"null point exception\")\n\t}\n\t*m = append((*m)[0:0], data...)\n\treturn nil\n}\nfunc (j JSON) IsNull() bool {\n\treturn len(j) == 0 || string(j) == \"null\"\n}\nfunc (j JSON) Equals(j1 JSON) bool {\n\treturn bytes.Equal([]byte(j), []byte(j1))\n}\n\n```\n\n### 在自定义 Model 中使用 Json Type\n\n```golang\npackage models\ntype Model struct {\n    ID        int   `gorm:\"primary_key\" json:\"id\"`\n    CreatedAt int64 `json:\"createdAt\"`\n    UpdatedAt int64 `json:\"updatedAt\"`\n    Object    JSON  `sql:\"type:json\" json:\"object,omitempty\"`\n}\n```\n\n","slug":"gorm 中使用 json","published":1,"updated":"2021-09-08T06:58:02.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cf9w000blusxchmd55kl","content":"<h3 id=\"Json-类的实现\"><a href=\"#Json-类的实现\" class=\"headerlink\" title=\"Json 类的实现\"></a>Json 类的实现</h3><pre><code class=\"golang\">package models\n\nimport (\n    &quot;bytes&quot;\n    &quot;database/sql/driver&quot;\n    &quot;errors&quot;\n)\n\ntype JSON []byte\n\nfunc (j JSON) Value() (driver.Value, error) &#123;\n    if j.IsNull() &#123;\n        return nil, nil\n    &#125;\n    return string(j), nil\n&#125;\nfunc (j *JSON) Scan(value interface&#123;&#125;) error &#123;\n    if value == nil &#123;\n        *j = nil\n        return nil\n    &#125;\n    s, ok := value.([]byte)\n    if !ok &#123;\n        errors.New(&quot;Invalid Scan Source&quot;)\n    &#125;\n    *j = append((*j)[0:0], s...)\n    return nil\n&#125;\nfunc (m JSON) MarshalJSON() ([]byte, error) &#123;\n    if m == nil &#123;\n        return []byte(&quot;null&quot;), nil\n    &#125;\n    return m, nil\n&#125;\nfunc (m *JSON) UnmarshalJSON(data []byte) error &#123;\n    if m == nil &#123;\n        return errors.New(&quot;null point exception&quot;)\n    &#125;\n    *m = append((*m)[0:0], data...)\n    return nil\n&#125;\nfunc (j JSON) IsNull() bool &#123;\n    return len(j) == 0 || string(j) == &quot;null&quot;\n&#125;\nfunc (j JSON) Equals(j1 JSON) bool &#123;\n    return bytes.Equal([]byte(j), []byte(j1))\n&#125;\n</code></pre>\n<h3 id=\"在自定义-Model-中使用-Json-Type\"><a href=\"#在自定义-Model-中使用-Json-Type\" class=\"headerlink\" title=\"在自定义 Model 中使用 Json Type\"></a>在自定义 Model 中使用 Json Type</h3><pre><code class=\"golang\">package models\ntype Model struct &#123;\n    ID        int   `gorm:&quot;primary_key&quot; json:&quot;id&quot;`\n    CreatedAt int64 `json:&quot;createdAt&quot;`\n    UpdatedAt int64 `json:&quot;updatedAt&quot;`\n    Object    JSON  `sql:&quot;type:json&quot; json:&quot;object,omitempty&quot;`\n&#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Json-类的实现\"><a href=\"#Json-类的实现\" class=\"headerlink\" title=\"Json 类的实现\"></a>Json 类的实现</h3><pre><code class=\"golang\">package models\n\nimport (\n    &quot;bytes&quot;\n    &quot;database/sql/driver&quot;\n    &quot;errors&quot;\n)\n\ntype JSON []byte\n\nfunc (j JSON) Value() (driver.Value, error) &#123;\n    if j.IsNull() &#123;\n        return nil, nil\n    &#125;\n    return string(j), nil\n&#125;\nfunc (j *JSON) Scan(value interface&#123;&#125;) error &#123;\n    if value == nil &#123;\n        *j = nil\n        return nil\n    &#125;\n    s, ok := value.([]byte)\n    if !ok &#123;\n        errors.New(&quot;Invalid Scan Source&quot;)\n    &#125;\n    *j = append((*j)[0:0], s...)\n    return nil\n&#125;\nfunc (m JSON) MarshalJSON() ([]byte, error) &#123;\n    if m == nil &#123;\n        return []byte(&quot;null&quot;), nil\n    &#125;\n    return m, nil\n&#125;\nfunc (m *JSON) UnmarshalJSON(data []byte) error &#123;\n    if m == nil &#123;\n        return errors.New(&quot;null point exception&quot;)\n    &#125;\n    *m = append((*m)[0:0], data...)\n    return nil\n&#125;\nfunc (j JSON) IsNull() bool &#123;\n    return len(j) == 0 || string(j) == &quot;null&quot;\n&#125;\nfunc (j JSON) Equals(j1 JSON) bool &#123;\n    return bytes.Equal([]byte(j), []byte(j1))\n&#125;\n</code></pre>\n<h3 id=\"在自定义-Model-中使用-Json-Type\"><a href=\"#在自定义-Model-中使用-Json-Type\" class=\"headerlink\" title=\"在自定义 Model 中使用 Json Type\"></a>在自定义 Model 中使用 Json Type</h3><pre><code class=\"golang\">package models\ntype Model struct &#123;\n    ID        int   `gorm:&quot;primary_key&quot; json:&quot;id&quot;`\n    CreatedAt int64 `json:&quot;createdAt&quot;`\n    UpdatedAt int64 `json:&quot;updatedAt&quot;`\n    Object    JSON  `sql:&quot;type:json&quot; json:&quot;object,omitempty&quot;`\n&#125;\n</code></pre>\n"},{"title":"http 状态码","date":"2018-04-18T09:21:05.000Z","updated":"2018-04-18T09:21:05.000Z","auto_excerpt":{"enable":true,"length":150},"_content":"\n\nHTTP协议状态码表示的意思主要分为五类 ,大体是 :\n\n* 1×× 　　保留\n* 2×× 　　表示请求成功地接收\n* 3×× 　　为完成请求客户需进一步细化请求\n* 4×× 　　客户错误\n* 5×× 　　服务器错误\n\n#### 100 Continue\n指示客户端应该继续请求。回送用于通知客户端此次请求已经收到，并且没有被服务器拒绝。\n客户端应该继续发送剩下的请求数据或者请求已经完成，或者忽略回送数据。服务器必须发送\n最后的回送在请求之后。\n\n#### 101 Switching Protocols \n服务器依照客服端请求，通过Upgrade头信息，改变当前连接的应用协议。服务器将根据Upgrade头立刻改变协议\n\n在101回送以空行结束的时候。\n\n### Successful \n\n#### 200 OK\n指示客服端的请求已经成功收到，解析，接受。\n#### 201 Created \n请求已经完成并一个新的返回资源被创建。被创建的资源可能是一个URI资源，通常URI资源在Location头指定。回送应该包含一个实体数据\n并且包含资源特性以及location通过用户或者用户代理来选择合适的方法。实体数据格式通过煤体类型来指定即content-type头。最开始服务 器\n必须创建指定的资源在返回201状态码之前。如果行为没有被立刻执行，服务器应该返回202。\n#### 202 Accepted \n请求已经被接受用来处理。但是处理并没有完成。请求可能或者根本没有遵照执行，因为处理实际执行过程中可能被拒绝。\n#### 203 Non-Authoritative Information\n不是权威性信息。\n#### 204 No Content \n服务器已经接受请求并且没必要返回实体数据，可能需要返回更新信息。回送可能包含新的或更新信息由entity-headers呈现。\n#### 205 Reset Content \n服务器已经接受请求并且用户代理应该重新设置文档视图。\n#### 206 Partial Content \n服务器已经接受请求GET请求资源的部分。请求必须包含一个Range头信息以指示获取范围可能必须包含If-Range头信息以成立请求条件。\n### Redirection \n\n#### 300 Multiple Choices\n请求资源符合任何一个呈现方式。\n#### 301 Moved Permanently \n请求的资源已经被赋予一个新的URI。\n#### 302 Found \n通过不同的URI请求资源的临时文件。\n#### 303 See Other\n#### 304 Not Modified \n如果客服端已经完成一个有条件的请求并且请求是允许的，但是这个文档并没有改变，服务器应该返回304状态码。304\n状态码一定不能包含信息主体，从而通常通过一个头字段后的第一个空行结束。\n\n#### 305 Use Proxy\n请求的资源必须通过代理（由Location字段指定）来访问。Location资源给出了代理的URI。\n#### 306 Unused\n#### 307 Temporary Redirect\n临时重定向。\n### Client Error\n\n#### 400 Bad Request\n因为错误的语法导致服务器无法理解请求信息。\n#### 401 Unauthorized \n如果请求需要用户验证。回送应该包含一个WWW-Authenticate头字段用来指明请求资源的权限。\n#### 402 Payment Required \n保留状态码。\n#### 403 Forbidden \n服务器接受请求，但是被拒绝处理。\n#### 404 Not Found \n服务器已经找到任何匹配Request-URI的资源。\n#### 405 Menthod Not Allowed \nRequest-Line 请求的方法不被允许通过指定的URI。\n#### 406 Not Acceptable\n客户端浏览器不接受所请求页面的 MIME 类型。\n#### 407 Proxy Authentication Required\n要求进行代理身份验证。\n#### 408 Reqeust Timeout \n客服端没有提交任何请求在服务器等待处理时间内。\n#### 409 Conflict\n#### 410 Gone\n#### 411 Length Required \n服务器拒绝接受请求在没有定义Content-Length字段的情况下。\n#### 412 Precondition Failed\n前提条件失败。\n#### 413 Request Entity Too Large \n服务器拒绝处理请求因为请求数据超过服务器能够处理的范围。服务器可能关闭当前连接来阻止客服端继续请求。\n#### 414 Request-URI Too Long \n服务器拒绝服务当前请求因为URI的长度超过了服务器的解析范围。\n#### 415 Unsupported Media Type \n服务器拒绝服务当前请求因为请求数据格式并不被请求的资源支持。\n#### 416 Request Range Not Satisfialbe\n所请求的范围无法满足。\n#### 417 Expectation Failed\n执行失败。\n### Server Error \n\n#### 500 Internal Server Error\n服务器遭遇异常阻止了当前请求的执行\n#### 501 Not Implemented \n服务器没有相应的执行动作来完成当前请求。\n#### 502 Bad Gateway\nWeb 服务器用作网关或代理服务器时收到了无效响应。\n#### 503 Service Unavailable \n因为临时文件超载导致服务器不能处理当前请求。\n#### 504 Gateway Timeout\n网关访问超时。\n#### 505 Http Version Not Supported\nHTTP 版本不受支持。\n\n```\n\"100\" : Continue\n\"101\" : witching Protocols\n\"200\" : OK\n\"201\" : Created\n\"202\" : Accepted\n\"203\" : Non-Authoritative Information\n\"204\" : No Content\n\"205\" : Reset Content\n\"206\" : Partial Content\n\"300\" : Multiple Choices\n\"301\" : Moved Permanently\n\"302\" : Found\n\"303\" : See Other\n\"304\" : Not Modified\n\"305\" : Use Proxy\n\"307\" : Temporary Redirect\n\"400\" : Bad Request\n\"401\" : Unauthorized\n\"402\" : Payment Required\n\"403\" : Forbidden\n\"404\" : Not Found\n\"405\" : Method Not Allowed\n\"406\" : Not Acceptable\n\"407\" : Proxy Authentication Required\n\"408\" : Request Time-out\n\"409\" : Conflict\n\"410\" : Gone\n\"411\" : Length Required\n\"412\" : Precondition Failed\n\"413\" : Request Entity Too Large\n\"414\" : Request-URI Too Large\n\"415\" : Unsupported Media Type\n\"416\" : Requested range not satisfiable\n\"417\" : Expectation Failed\n\"500\" : Internal Server Error\n\"501\" : Not Implemented\n\"502\" : Bad Gateway\n\"503\" : Service Unavailable\n\"504\" : Gateway Time-out\n\"505\" : HTTP Version not supported\n```\n\n","source":"_posts/http 状态码.md","raw":"---\ntitle: http 状态码\ndate: 2018-04-18 17:21:05\nupdated: 2018-04-18 17:21:05\ntags:\n- http\n- web\ncategories:\n- web\n- http\n\n\nauto_excerpt:\n  enable: true\n  length: 150\n---\n\n\nHTTP协议状态码表示的意思主要分为五类 ,大体是 :\n\n* 1×× 　　保留\n* 2×× 　　表示请求成功地接收\n* 3×× 　　为完成请求客户需进一步细化请求\n* 4×× 　　客户错误\n* 5×× 　　服务器错误\n\n#### 100 Continue\n指示客户端应该继续请求。回送用于通知客户端此次请求已经收到，并且没有被服务器拒绝。\n客户端应该继续发送剩下的请求数据或者请求已经完成，或者忽略回送数据。服务器必须发送\n最后的回送在请求之后。\n\n#### 101 Switching Protocols \n服务器依照客服端请求，通过Upgrade头信息，改变当前连接的应用协议。服务器将根据Upgrade头立刻改变协议\n\n在101回送以空行结束的时候。\n\n### Successful \n\n#### 200 OK\n指示客服端的请求已经成功收到，解析，接受。\n#### 201 Created \n请求已经完成并一个新的返回资源被创建。被创建的资源可能是一个URI资源，通常URI资源在Location头指定。回送应该包含一个实体数据\n并且包含资源特性以及location通过用户或者用户代理来选择合适的方法。实体数据格式通过煤体类型来指定即content-type头。最开始服务 器\n必须创建指定的资源在返回201状态码之前。如果行为没有被立刻执行，服务器应该返回202。\n#### 202 Accepted \n请求已经被接受用来处理。但是处理并没有完成。请求可能或者根本没有遵照执行，因为处理实际执行过程中可能被拒绝。\n#### 203 Non-Authoritative Information\n不是权威性信息。\n#### 204 No Content \n服务器已经接受请求并且没必要返回实体数据，可能需要返回更新信息。回送可能包含新的或更新信息由entity-headers呈现。\n#### 205 Reset Content \n服务器已经接受请求并且用户代理应该重新设置文档视图。\n#### 206 Partial Content \n服务器已经接受请求GET请求资源的部分。请求必须包含一个Range头信息以指示获取范围可能必须包含If-Range头信息以成立请求条件。\n### Redirection \n\n#### 300 Multiple Choices\n请求资源符合任何一个呈现方式。\n#### 301 Moved Permanently \n请求的资源已经被赋予一个新的URI。\n#### 302 Found \n通过不同的URI请求资源的临时文件。\n#### 303 See Other\n#### 304 Not Modified \n如果客服端已经完成一个有条件的请求并且请求是允许的，但是这个文档并没有改变，服务器应该返回304状态码。304\n状态码一定不能包含信息主体，从而通常通过一个头字段后的第一个空行结束。\n\n#### 305 Use Proxy\n请求的资源必须通过代理（由Location字段指定）来访问。Location资源给出了代理的URI。\n#### 306 Unused\n#### 307 Temporary Redirect\n临时重定向。\n### Client Error\n\n#### 400 Bad Request\n因为错误的语法导致服务器无法理解请求信息。\n#### 401 Unauthorized \n如果请求需要用户验证。回送应该包含一个WWW-Authenticate头字段用来指明请求资源的权限。\n#### 402 Payment Required \n保留状态码。\n#### 403 Forbidden \n服务器接受请求，但是被拒绝处理。\n#### 404 Not Found \n服务器已经找到任何匹配Request-URI的资源。\n#### 405 Menthod Not Allowed \nRequest-Line 请求的方法不被允许通过指定的URI。\n#### 406 Not Acceptable\n客户端浏览器不接受所请求页面的 MIME 类型。\n#### 407 Proxy Authentication Required\n要求进行代理身份验证。\n#### 408 Reqeust Timeout \n客服端没有提交任何请求在服务器等待处理时间内。\n#### 409 Conflict\n#### 410 Gone\n#### 411 Length Required \n服务器拒绝接受请求在没有定义Content-Length字段的情况下。\n#### 412 Precondition Failed\n前提条件失败。\n#### 413 Request Entity Too Large \n服务器拒绝处理请求因为请求数据超过服务器能够处理的范围。服务器可能关闭当前连接来阻止客服端继续请求。\n#### 414 Request-URI Too Long \n服务器拒绝服务当前请求因为URI的长度超过了服务器的解析范围。\n#### 415 Unsupported Media Type \n服务器拒绝服务当前请求因为请求数据格式并不被请求的资源支持。\n#### 416 Request Range Not Satisfialbe\n所请求的范围无法满足。\n#### 417 Expectation Failed\n执行失败。\n### Server Error \n\n#### 500 Internal Server Error\n服务器遭遇异常阻止了当前请求的执行\n#### 501 Not Implemented \n服务器没有相应的执行动作来完成当前请求。\n#### 502 Bad Gateway\nWeb 服务器用作网关或代理服务器时收到了无效响应。\n#### 503 Service Unavailable \n因为临时文件超载导致服务器不能处理当前请求。\n#### 504 Gateway Timeout\n网关访问超时。\n#### 505 Http Version Not Supported\nHTTP 版本不受支持。\n\n```\n\"100\" : Continue\n\"101\" : witching Protocols\n\"200\" : OK\n\"201\" : Created\n\"202\" : Accepted\n\"203\" : Non-Authoritative Information\n\"204\" : No Content\n\"205\" : Reset Content\n\"206\" : Partial Content\n\"300\" : Multiple Choices\n\"301\" : Moved Permanently\n\"302\" : Found\n\"303\" : See Other\n\"304\" : Not Modified\n\"305\" : Use Proxy\n\"307\" : Temporary Redirect\n\"400\" : Bad Request\n\"401\" : Unauthorized\n\"402\" : Payment Required\n\"403\" : Forbidden\n\"404\" : Not Found\n\"405\" : Method Not Allowed\n\"406\" : Not Acceptable\n\"407\" : Proxy Authentication Required\n\"408\" : Request Time-out\n\"409\" : Conflict\n\"410\" : Gone\n\"411\" : Length Required\n\"412\" : Precondition Failed\n\"413\" : Request Entity Too Large\n\"414\" : Request-URI Too Large\n\"415\" : Unsupported Media Type\n\"416\" : Requested range not satisfiable\n\"417\" : Expectation Failed\n\"500\" : Internal Server Error\n\"501\" : Not Implemented\n\"502\" : Bad Gateway\n\"503\" : Service Unavailable\n\"504\" : Gateway Time-out\n\"505\" : HTTP Version not supported\n```\n\n","slug":"http 状态码","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cf9x000clusxa5fqfnh7","content":"<p>HTTP协议状态码表示的意思主要分为五类 ,大体是 :</p>\n<ul>\n<li>1×× 　　保留</li>\n<li>2×× 　　表示请求成功地接收</li>\n<li>3×× 　　为完成请求客户需进一步细化请求</li>\n<li>4×× 　　客户错误</li>\n<li>5×× 　　服务器错误</li>\n</ul>\n<h4 id=\"100-Continue\"><a href=\"#100-Continue\" class=\"headerlink\" title=\"100 Continue\"></a>100 Continue</h4><p>指示客户端应该继续请求。回送用于通知客户端此次请求已经收到，并且没有被服务器拒绝。<br>客户端应该继续发送剩下的请求数据或者请求已经完成，或者忽略回送数据。服务器必须发送<br>最后的回送在请求之后。</p>\n<h4 id=\"101-Switching-Protocols\"><a href=\"#101-Switching-Protocols\" class=\"headerlink\" title=\"101 Switching Protocols\"></a>101 Switching Protocols</h4><p>服务器依照客服端请求，通过Upgrade头信息，改变当前连接的应用协议。服务器将根据Upgrade头立刻改变协议</p>\n<p>在101回送以空行结束的时候。</p>\n<h3 id=\"Successful\"><a href=\"#Successful\" class=\"headerlink\" title=\"Successful\"></a>Successful</h3><h4 id=\"200-OK\"><a href=\"#200-OK\" class=\"headerlink\" title=\"200 OK\"></a>200 OK</h4><p>指示客服端的请求已经成功收到，解析，接受。</p>\n<h4 id=\"201-Created\"><a href=\"#201-Created\" class=\"headerlink\" title=\"201 Created\"></a>201 Created</h4><p>请求已经完成并一个新的返回资源被创建。被创建的资源可能是一个URI资源，通常URI资源在Location头指定。回送应该包含一个实体数据<br>并且包含资源特性以及location通过用户或者用户代理来选择合适的方法。实体数据格式通过煤体类型来指定即content-type头。最开始服务 器<br>必须创建指定的资源在返回201状态码之前。如果行为没有被立刻执行，服务器应该返回202。</p>\n<h4 id=\"202-Accepted\"><a href=\"#202-Accepted\" class=\"headerlink\" title=\"202 Accepted\"></a>202 Accepted</h4><p>请求已经被接受用来处理。但是处理并没有完成。请求可能或者根本没有遵照执行，因为处理实际执行过程中可能被拒绝。</p>\n<h4 id=\"203-Non-Authoritative-Information\"><a href=\"#203-Non-Authoritative-Information\" class=\"headerlink\" title=\"203 Non-Authoritative Information\"></a>203 Non-Authoritative Information</h4><p>不是权威性信息。</p>\n<h4 id=\"204-No-Content\"><a href=\"#204-No-Content\" class=\"headerlink\" title=\"204 No Content\"></a>204 No Content</h4><p>服务器已经接受请求并且没必要返回实体数据，可能需要返回更新信息。回送可能包含新的或更新信息由entity-headers呈现。</p>\n<h4 id=\"205-Reset-Content\"><a href=\"#205-Reset-Content\" class=\"headerlink\" title=\"205 Reset Content\"></a>205 Reset Content</h4><p>服务器已经接受请求并且用户代理应该重新设置文档视图。</p>\n<h4 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206 Partial Content\"></a>206 Partial Content</h4><p>服务器已经接受请求GET请求资源的部分。请求必须包含一个Range头信息以指示获取范围可能必须包含If-Range头信息以成立请求条件。</p>\n<h3 id=\"Redirection\"><a href=\"#Redirection\" class=\"headerlink\" title=\"Redirection\"></a>Redirection</h3><h4 id=\"300-Multiple-Choices\"><a href=\"#300-Multiple-Choices\" class=\"headerlink\" title=\"300 Multiple Choices\"></a>300 Multiple Choices</h4><p>请求资源符合任何一个呈现方式。</p>\n<h4 id=\"301-Moved-Permanently\"><a href=\"#301-Moved-Permanently\" class=\"headerlink\" title=\"301 Moved Permanently\"></a>301 Moved Permanently</h4><p>请求的资源已经被赋予一个新的URI。</p>\n<h4 id=\"302-Found\"><a href=\"#302-Found\" class=\"headerlink\" title=\"302 Found\"></a>302 Found</h4><p>通过不同的URI请求资源的临时文件。</p>\n<h4 id=\"303-See-Other\"><a href=\"#303-See-Other\" class=\"headerlink\" title=\"303 See Other\"></a>303 See Other</h4><h4 id=\"304-Not-Modified\"><a href=\"#304-Not-Modified\" class=\"headerlink\" title=\"304 Not Modified\"></a>304 Not Modified</h4><p>如果客服端已经完成一个有条件的请求并且请求是允许的，但是这个文档并没有改变，服务器应该返回304状态码。304<br>状态码一定不能包含信息主体，从而通常通过一个头字段后的第一个空行结束。</p>\n<h4 id=\"305-Use-Proxy\"><a href=\"#305-Use-Proxy\" class=\"headerlink\" title=\"305 Use Proxy\"></a>305 Use Proxy</h4><p>请求的资源必须通过代理（由Location字段指定）来访问。Location资源给出了代理的URI。</p>\n<h4 id=\"306-Unused\"><a href=\"#306-Unused\" class=\"headerlink\" title=\"306 Unused\"></a>306 Unused</h4><h4 id=\"307-Temporary-Redirect\"><a href=\"#307-Temporary-Redirect\" class=\"headerlink\" title=\"307 Temporary Redirect\"></a>307 Temporary Redirect</h4><p>临时重定向。</p>\n<h3 id=\"Client-Error\"><a href=\"#Client-Error\" class=\"headerlink\" title=\"Client Error\"></a>Client Error</h3><h4 id=\"400-Bad-Request\"><a href=\"#400-Bad-Request\" class=\"headerlink\" title=\"400 Bad Request\"></a>400 Bad Request</h4><p>因为错误的语法导致服务器无法理解请求信息。</p>\n<h4 id=\"401-Unauthorized\"><a href=\"#401-Unauthorized\" class=\"headerlink\" title=\"401 Unauthorized\"></a>401 Unauthorized</h4><p>如果请求需要用户验证。回送应该包含一个WWW-Authenticate头字段用来指明请求资源的权限。</p>\n<h4 id=\"402-Payment-Required\"><a href=\"#402-Payment-Required\" class=\"headerlink\" title=\"402 Payment Required\"></a>402 Payment Required</h4><p>保留状态码。</p>\n<h4 id=\"403-Forbidden\"><a href=\"#403-Forbidden\" class=\"headerlink\" title=\"403 Forbidden\"></a>403 Forbidden</h4><p>服务器接受请求，但是被拒绝处理。</p>\n<h4 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a>404 Not Found</h4><p>服务器已经找到任何匹配Request-URI的资源。</p>\n<h4 id=\"405-Menthod-Not-Allowed\"><a href=\"#405-Menthod-Not-Allowed\" class=\"headerlink\" title=\"405 Menthod Not Allowed\"></a>405 Menthod Not Allowed</h4><p>Request-Line 请求的方法不被允许通过指定的URI。</p>\n<h4 id=\"406-Not-Acceptable\"><a href=\"#406-Not-Acceptable\" class=\"headerlink\" title=\"406 Not Acceptable\"></a>406 Not Acceptable</h4><p>客户端浏览器不接受所请求页面的 MIME 类型。</p>\n<h4 id=\"407-Proxy-Authentication-Required\"><a href=\"#407-Proxy-Authentication-Required\" class=\"headerlink\" title=\"407 Proxy Authentication Required\"></a>407 Proxy Authentication Required</h4><p>要求进行代理身份验证。</p>\n<h4 id=\"408-Reqeust-Timeout\"><a href=\"#408-Reqeust-Timeout\" class=\"headerlink\" title=\"408 Reqeust Timeout\"></a>408 Reqeust Timeout</h4><p>客服端没有提交任何请求在服务器等待处理时间内。</p>\n<h4 id=\"409-Conflict\"><a href=\"#409-Conflict\" class=\"headerlink\" title=\"409 Conflict\"></a>409 Conflict</h4><h4 id=\"410-Gone\"><a href=\"#410-Gone\" class=\"headerlink\" title=\"410 Gone\"></a>410 Gone</h4><h4 id=\"411-Length-Required\"><a href=\"#411-Length-Required\" class=\"headerlink\" title=\"411 Length Required\"></a>411 Length Required</h4><p>服务器拒绝接受请求在没有定义Content-Length字段的情况下。</p>\n<h4 id=\"412-Precondition-Failed\"><a href=\"#412-Precondition-Failed\" class=\"headerlink\" title=\"412 Precondition Failed\"></a>412 Precondition Failed</h4><p>前提条件失败。</p>\n<h4 id=\"413-Request-Entity-Too-Large\"><a href=\"#413-Request-Entity-Too-Large\" class=\"headerlink\" title=\"413 Request Entity Too Large\"></a>413 Request Entity Too Large</h4><p>服务器拒绝处理请求因为请求数据超过服务器能够处理的范围。服务器可能关闭当前连接来阻止客服端继续请求。</p>\n<h4 id=\"414-Request-URI-Too-Long\"><a href=\"#414-Request-URI-Too-Long\" class=\"headerlink\" title=\"414 Request-URI Too Long\"></a>414 Request-URI Too Long</h4><p>服务器拒绝服务当前请求因为URI的长度超过了服务器的解析范围。</p>\n<h4 id=\"415-Unsupported-Media-Type\"><a href=\"#415-Unsupported-Media-Type\" class=\"headerlink\" title=\"415 Unsupported Media Type\"></a>415 Unsupported Media Type</h4><p>服务器拒绝服务当前请求因为请求数据格式并不被请求的资源支持。</p>\n<h4 id=\"416-Request-Range-Not-Satisfialbe\"><a href=\"#416-Request-Range-Not-Satisfialbe\" class=\"headerlink\" title=\"416 Request Range Not Satisfialbe\"></a>416 Request Range Not Satisfialbe</h4><p>所请求的范围无法满足。</p>\n<h4 id=\"417-Expectation-Failed\"><a href=\"#417-Expectation-Failed\" class=\"headerlink\" title=\"417 Expectation Failed\"></a>417 Expectation Failed</h4><p>执行失败。</p>\n<h3 id=\"Server-Error\"><a href=\"#Server-Error\" class=\"headerlink\" title=\"Server Error\"></a>Server Error</h3><h4 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500 Internal Server Error\"></a>500 Internal Server Error</h4><p>服务器遭遇异常阻止了当前请求的执行</p>\n<h4 id=\"501-Not-Implemented\"><a href=\"#501-Not-Implemented\" class=\"headerlink\" title=\"501 Not Implemented\"></a>501 Not Implemented</h4><p>服务器没有相应的执行动作来完成当前请求。</p>\n<h4 id=\"502-Bad-Gateway\"><a href=\"#502-Bad-Gateway\" class=\"headerlink\" title=\"502 Bad Gateway\"></a>502 Bad Gateway</h4><p>Web 服务器用作网关或代理服务器时收到了无效响应。</p>\n<h4 id=\"503-Service-Unavailable\"><a href=\"#503-Service-Unavailable\" class=\"headerlink\" title=\"503 Service Unavailable\"></a>503 Service Unavailable</h4><p>因为临时文件超载导致服务器不能处理当前请求。</p>\n<h4 id=\"504-Gateway-Timeout\"><a href=\"#504-Gateway-Timeout\" class=\"headerlink\" title=\"504 Gateway Timeout\"></a>504 Gateway Timeout</h4><p>网关访问超时。</p>\n<h4 id=\"505-Http-Version-Not-Supported\"><a href=\"#505-Http-Version-Not-Supported\" class=\"headerlink\" title=\"505 Http Version Not Supported\"></a>505 Http Version Not Supported</h4><p>HTTP 版本不受支持。</p>\n<pre><code>&quot;100&quot; : Continue\n&quot;101&quot; : witching Protocols\n&quot;200&quot; : OK\n&quot;201&quot; : Created\n&quot;202&quot; : Accepted\n&quot;203&quot; : Non-Authoritative Information\n&quot;204&quot; : No Content\n&quot;205&quot; : Reset Content\n&quot;206&quot; : Partial Content\n&quot;300&quot; : Multiple Choices\n&quot;301&quot; : Moved Permanently\n&quot;302&quot; : Found\n&quot;303&quot; : See Other\n&quot;304&quot; : Not Modified\n&quot;305&quot; : Use Proxy\n&quot;307&quot; : Temporary Redirect\n&quot;400&quot; : Bad Request\n&quot;401&quot; : Unauthorized\n&quot;402&quot; : Payment Required\n&quot;403&quot; : Forbidden\n&quot;404&quot; : Not Found\n&quot;405&quot; : Method Not Allowed\n&quot;406&quot; : Not Acceptable\n&quot;407&quot; : Proxy Authentication Required\n&quot;408&quot; : Request Time-out\n&quot;409&quot; : Conflict\n&quot;410&quot; : Gone\n&quot;411&quot; : Length Required\n&quot;412&quot; : Precondition Failed\n&quot;413&quot; : Request Entity Too Large\n&quot;414&quot; : Request-URI Too Large\n&quot;415&quot; : Unsupported Media Type\n&quot;416&quot; : Requested range not satisfiable\n&quot;417&quot; : Expectation Failed\n&quot;500&quot; : Internal Server Error\n&quot;501&quot; : Not Implemented\n&quot;502&quot; : Bad Gateway\n&quot;503&quot; : Service Unavailable\n&quot;504&quot; : Gateway Time-out\n&quot;505&quot; : HTTP Version not supported\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>HTTP协议状态码表示的意思主要分为五类 ,大体是 :</p>\n<ul>\n<li>1×× 　　保留</li>\n<li>2×× 　　表示请求成功地接收</li>\n<li>3×× 　　为完成请求客户需进一步细化请求</li>\n<li>4×× 　　客户错误</li>\n<li>5×× 　　服务器错误</li>\n</ul>\n<h4 id=\"100-Continue\"><a href=\"#100-Continue\" class=\"headerlink\" title=\"100 Continue\"></a>100 Continue</h4><p>指示客户端应该继续请求。回送用于通知客户端此次请求已经收到，并且没有被服务器拒绝。<br>客户端应该继续发送剩下的请求数据或者请求已经完成，或者忽略回送数据。服务器必须发送<br>最后的回送在请求之后。</p>\n<h4 id=\"101-Switching-Protocols\"><a href=\"#101-Switching-Protocols\" class=\"headerlink\" title=\"101 Switching Protocols\"></a>101 Switching Protocols</h4><p>服务器依照客服端请求，通过Upgrade头信息，改变当前连接的应用协议。服务器将根据Upgrade头立刻改变协议</p>\n<p>在101回送以空行结束的时候。</p>\n<h3 id=\"Successful\"><a href=\"#Successful\" class=\"headerlink\" title=\"Successful\"></a>Successful</h3><h4 id=\"200-OK\"><a href=\"#200-OK\" class=\"headerlink\" title=\"200 OK\"></a>200 OK</h4><p>指示客服端的请求已经成功收到，解析，接受。</p>\n<h4 id=\"201-Created\"><a href=\"#201-Created\" class=\"headerlink\" title=\"201 Created\"></a>201 Created</h4><p>请求已经完成并一个新的返回资源被创建。被创建的资源可能是一个URI资源，通常URI资源在Location头指定。回送应该包含一个实体数据<br>并且包含资源特性以及location通过用户或者用户代理来选择合适的方法。实体数据格式通过煤体类型来指定即content-type头。最开始服务 器<br>必须创建指定的资源在返回201状态码之前。如果行为没有被立刻执行，服务器应该返回202。</p>\n<h4 id=\"202-Accepted\"><a href=\"#202-Accepted\" class=\"headerlink\" title=\"202 Accepted\"></a>202 Accepted</h4><p>请求已经被接受用来处理。但是处理并没有完成。请求可能或者根本没有遵照执行，因为处理实际执行过程中可能被拒绝。</p>\n<h4 id=\"203-Non-Authoritative-Information\"><a href=\"#203-Non-Authoritative-Information\" class=\"headerlink\" title=\"203 Non-Authoritative Information\"></a>203 Non-Authoritative Information</h4><p>不是权威性信息。</p>\n<h4 id=\"204-No-Content\"><a href=\"#204-No-Content\" class=\"headerlink\" title=\"204 No Content\"></a>204 No Content</h4><p>服务器已经接受请求并且没必要返回实体数据，可能需要返回更新信息。回送可能包含新的或更新信息由entity-headers呈现。</p>\n<h4 id=\"205-Reset-Content\"><a href=\"#205-Reset-Content\" class=\"headerlink\" title=\"205 Reset Content\"></a>205 Reset Content</h4><p>服务器已经接受请求并且用户代理应该重新设置文档视图。</p>\n<h4 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206 Partial Content\"></a>206 Partial Content</h4><p>服务器已经接受请求GET请求资源的部分。请求必须包含一个Range头信息以指示获取范围可能必须包含If-Range头信息以成立请求条件。</p>\n<h3 id=\"Redirection\"><a href=\"#Redirection\" class=\"headerlink\" title=\"Redirection\"></a>Redirection</h3><h4 id=\"300-Multiple-Choices\"><a href=\"#300-Multiple-Choices\" class=\"headerlink\" title=\"300 Multiple Choices\"></a>300 Multiple Choices</h4><p>请求资源符合任何一个呈现方式。</p>\n<h4 id=\"301-Moved-Permanently\"><a href=\"#301-Moved-Permanently\" class=\"headerlink\" title=\"301 Moved Permanently\"></a>301 Moved Permanently</h4><p>请求的资源已经被赋予一个新的URI。</p>\n<h4 id=\"302-Found\"><a href=\"#302-Found\" class=\"headerlink\" title=\"302 Found\"></a>302 Found</h4><p>通过不同的URI请求资源的临时文件。</p>\n<h4 id=\"303-See-Other\"><a href=\"#303-See-Other\" class=\"headerlink\" title=\"303 See Other\"></a>303 See Other</h4><h4 id=\"304-Not-Modified\"><a href=\"#304-Not-Modified\" class=\"headerlink\" title=\"304 Not Modified\"></a>304 Not Modified</h4><p>如果客服端已经完成一个有条件的请求并且请求是允许的，但是这个文档并没有改变，服务器应该返回304状态码。304<br>状态码一定不能包含信息主体，从而通常通过一个头字段后的第一个空行结束。</p>\n<h4 id=\"305-Use-Proxy\"><a href=\"#305-Use-Proxy\" class=\"headerlink\" title=\"305 Use Proxy\"></a>305 Use Proxy</h4><p>请求的资源必须通过代理（由Location字段指定）来访问。Location资源给出了代理的URI。</p>\n<h4 id=\"306-Unused\"><a href=\"#306-Unused\" class=\"headerlink\" title=\"306 Unused\"></a>306 Unused</h4><h4 id=\"307-Temporary-Redirect\"><a href=\"#307-Temporary-Redirect\" class=\"headerlink\" title=\"307 Temporary Redirect\"></a>307 Temporary Redirect</h4><p>临时重定向。</p>\n<h3 id=\"Client-Error\"><a href=\"#Client-Error\" class=\"headerlink\" title=\"Client Error\"></a>Client Error</h3><h4 id=\"400-Bad-Request\"><a href=\"#400-Bad-Request\" class=\"headerlink\" title=\"400 Bad Request\"></a>400 Bad Request</h4><p>因为错误的语法导致服务器无法理解请求信息。</p>\n<h4 id=\"401-Unauthorized\"><a href=\"#401-Unauthorized\" class=\"headerlink\" title=\"401 Unauthorized\"></a>401 Unauthorized</h4><p>如果请求需要用户验证。回送应该包含一个WWW-Authenticate头字段用来指明请求资源的权限。</p>\n<h4 id=\"402-Payment-Required\"><a href=\"#402-Payment-Required\" class=\"headerlink\" title=\"402 Payment Required\"></a>402 Payment Required</h4><p>保留状态码。</p>\n<h4 id=\"403-Forbidden\"><a href=\"#403-Forbidden\" class=\"headerlink\" title=\"403 Forbidden\"></a>403 Forbidden</h4><p>服务器接受请求，但是被拒绝处理。</p>\n<h4 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a>404 Not Found</h4><p>服务器已经找到任何匹配Request-URI的资源。</p>\n<h4 id=\"405-Menthod-Not-Allowed\"><a href=\"#405-Menthod-Not-Allowed\" class=\"headerlink\" title=\"405 Menthod Not Allowed\"></a>405 Menthod Not Allowed</h4><p>Request-Line 请求的方法不被允许通过指定的URI。</p>\n<h4 id=\"406-Not-Acceptable\"><a href=\"#406-Not-Acceptable\" class=\"headerlink\" title=\"406 Not Acceptable\"></a>406 Not Acceptable</h4><p>客户端浏览器不接受所请求页面的 MIME 类型。</p>\n<h4 id=\"407-Proxy-Authentication-Required\"><a href=\"#407-Proxy-Authentication-Required\" class=\"headerlink\" title=\"407 Proxy Authentication Required\"></a>407 Proxy Authentication Required</h4><p>要求进行代理身份验证。</p>\n<h4 id=\"408-Reqeust-Timeout\"><a href=\"#408-Reqeust-Timeout\" class=\"headerlink\" title=\"408 Reqeust Timeout\"></a>408 Reqeust Timeout</h4><p>客服端没有提交任何请求在服务器等待处理时间内。</p>\n<h4 id=\"409-Conflict\"><a href=\"#409-Conflict\" class=\"headerlink\" title=\"409 Conflict\"></a>409 Conflict</h4><h4 id=\"410-Gone\"><a href=\"#410-Gone\" class=\"headerlink\" title=\"410 Gone\"></a>410 Gone</h4><h4 id=\"411-Length-Required\"><a href=\"#411-Length-Required\" class=\"headerlink\" title=\"411 Length Required\"></a>411 Length Required</h4><p>服务器拒绝接受请求在没有定义Content-Length字段的情况下。</p>\n<h4 id=\"412-Precondition-Failed\"><a href=\"#412-Precondition-Failed\" class=\"headerlink\" title=\"412 Precondition Failed\"></a>412 Precondition Failed</h4><p>前提条件失败。</p>\n<h4 id=\"413-Request-Entity-Too-Large\"><a href=\"#413-Request-Entity-Too-Large\" class=\"headerlink\" title=\"413 Request Entity Too Large\"></a>413 Request Entity Too Large</h4><p>服务器拒绝处理请求因为请求数据超过服务器能够处理的范围。服务器可能关闭当前连接来阻止客服端继续请求。</p>\n<h4 id=\"414-Request-URI-Too-Long\"><a href=\"#414-Request-URI-Too-Long\" class=\"headerlink\" title=\"414 Request-URI Too Long\"></a>414 Request-URI Too Long</h4><p>服务器拒绝服务当前请求因为URI的长度超过了服务器的解析范围。</p>\n<h4 id=\"415-Unsupported-Media-Type\"><a href=\"#415-Unsupported-Media-Type\" class=\"headerlink\" title=\"415 Unsupported Media Type\"></a>415 Unsupported Media Type</h4><p>服务器拒绝服务当前请求因为请求数据格式并不被请求的资源支持。</p>\n<h4 id=\"416-Request-Range-Not-Satisfialbe\"><a href=\"#416-Request-Range-Not-Satisfialbe\" class=\"headerlink\" title=\"416 Request Range Not Satisfialbe\"></a>416 Request Range Not Satisfialbe</h4><p>所请求的范围无法满足。</p>\n<h4 id=\"417-Expectation-Failed\"><a href=\"#417-Expectation-Failed\" class=\"headerlink\" title=\"417 Expectation Failed\"></a>417 Expectation Failed</h4><p>执行失败。</p>\n<h3 id=\"Server-Error\"><a href=\"#Server-Error\" class=\"headerlink\" title=\"Server Error\"></a>Server Error</h3><h4 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500 Internal Server Error\"></a>500 Internal Server Error</h4><p>服务器遭遇异常阻止了当前请求的执行</p>\n<h4 id=\"501-Not-Implemented\"><a href=\"#501-Not-Implemented\" class=\"headerlink\" title=\"501 Not Implemented\"></a>501 Not Implemented</h4><p>服务器没有相应的执行动作来完成当前请求。</p>\n<h4 id=\"502-Bad-Gateway\"><a href=\"#502-Bad-Gateway\" class=\"headerlink\" title=\"502 Bad Gateway\"></a>502 Bad Gateway</h4><p>Web 服务器用作网关或代理服务器时收到了无效响应。</p>\n<h4 id=\"503-Service-Unavailable\"><a href=\"#503-Service-Unavailable\" class=\"headerlink\" title=\"503 Service Unavailable\"></a>503 Service Unavailable</h4><p>因为临时文件超载导致服务器不能处理当前请求。</p>\n<h4 id=\"504-Gateway-Timeout\"><a href=\"#504-Gateway-Timeout\" class=\"headerlink\" title=\"504 Gateway Timeout\"></a>504 Gateway Timeout</h4><p>网关访问超时。</p>\n<h4 id=\"505-Http-Version-Not-Supported\"><a href=\"#505-Http-Version-Not-Supported\" class=\"headerlink\" title=\"505 Http Version Not Supported\"></a>505 Http Version Not Supported</h4><p>HTTP 版本不受支持。</p>\n<pre><code>&quot;100&quot; : Continue\n&quot;101&quot; : witching Protocols\n&quot;200&quot; : OK\n&quot;201&quot; : Created\n&quot;202&quot; : Accepted\n&quot;203&quot; : Non-Authoritative Information\n&quot;204&quot; : No Content\n&quot;205&quot; : Reset Content\n&quot;206&quot; : Partial Content\n&quot;300&quot; : Multiple Choices\n&quot;301&quot; : Moved Permanently\n&quot;302&quot; : Found\n&quot;303&quot; : See Other\n&quot;304&quot; : Not Modified\n&quot;305&quot; : Use Proxy\n&quot;307&quot; : Temporary Redirect\n&quot;400&quot; : Bad Request\n&quot;401&quot; : Unauthorized\n&quot;402&quot; : Payment Required\n&quot;403&quot; : Forbidden\n&quot;404&quot; : Not Found\n&quot;405&quot; : Method Not Allowed\n&quot;406&quot; : Not Acceptable\n&quot;407&quot; : Proxy Authentication Required\n&quot;408&quot; : Request Time-out\n&quot;409&quot; : Conflict\n&quot;410&quot; : Gone\n&quot;411&quot; : Length Required\n&quot;412&quot; : Precondition Failed\n&quot;413&quot; : Request Entity Too Large\n&quot;414&quot; : Request-URI Too Large\n&quot;415&quot; : Unsupported Media Type\n&quot;416&quot; : Requested range not satisfiable\n&quot;417&quot; : Expectation Failed\n&quot;500&quot; : Internal Server Error\n&quot;501&quot; : Not Implemented\n&quot;502&quot; : Bad Gateway\n&quot;503&quot; : Service Unavailable\n&quot;504&quot; : Gateway Time-out\n&quot;505&quot; : HTTP Version not supported\n</code></pre>\n"},{"title":"markdown 语法简介","date":"2019-06-05T03:13:18.000Z","_content":"\n```markdown\n#一、标题写法：\n第一种方法：\n1、在文本下面加上 等于号 = ，那么上方的文本就变成了大标题。等于号的个数无限制，但一定要大于0个哦。。\n2、在文本下面加上 下划线 - ，那么上方的文本就变成了中标题，同样的 下划线个数无限制。\n3、要想输入=号，上面有文本而不让其转化为大标题，则需要在两者之间加一个空行。\n另一种方法：（推荐这种方法；注意⚠️中间需要有一个空格）\n关于标题还有等级表示法，分为六个等级，显示的文本大小依次减小。不同等级之间是以井号  #  的个数来标识的。一级标题有一个 #，二级标题有两个# ，以此类推。\n例如：\n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题 \n二、编辑基本语法  \n1、字体格式强调\n 我们可以使用下面的方式给我们的文本添加强调的效果\n*强调*  (示例：斜体)  \n _强调_  (示例：斜体)  \n**加重强调**  (示例：粗体)  \n __加重强调__ (示例：粗体)  \n***特别强调*** (示例：粗斜体)  \n___特别强调___  (示例：粗斜体)  \n2、代码  \n`<hello world>`  \n\n3、代码块高亮\n(```)\n@Override\nprotected void onDestroy() {\n    EventBus.getDefault().unregister(this);\n    super.onDestroy();\n}\n(```)\n\n4、表格 （建议在表格前空一行，否则可能影响表格无法显示）\n \n 表头  | 表头  | 表头\n ---- | ----- | ------  \n 单元格内容  | 单元格内容 | 单元格内容 \n 单元格内容  | 单元格内容 | 单元格内容  \n \n5、其他引用\n图片  \n![图片名称](https://www.baidu.com/img/bd_logo1.png)  \n链接  \n[链接名称](https://www.baidu.com/)    \n6、列表 \n1. 项目1  \n2. 项目2  \n3. 项目3  \n   * 项目1 （一个*号会显示为一个黑点，注意⚠️有空格，否则直接显示为*项目1） \n   * 项目2   \n \n7、换行（建议直接在前一行后面补两个空格）\n直接回车不能换行，  \n可以在上一行文本后面补两个空格，  \n这样下一行的文本就换行了。\n或者就是在两行文本直接加一个空行。\n也能实现换行效果，不过这个行间距有点大。  \n \n8、引用\n> 第一行引用文字  \n> 第二行引用文字  \n\n```\n","source":"_posts/markdown 语法简介.md","raw":"---\ntitle: markdown 语法简介\ndate: 2019-06-05 11:13:18\ntags: \n- markdown\n- api\n\ncategories:\n- markdown\n- api\n---\n\n```markdown\n#一、标题写法：\n第一种方法：\n1、在文本下面加上 等于号 = ，那么上方的文本就变成了大标题。等于号的个数无限制，但一定要大于0个哦。。\n2、在文本下面加上 下划线 - ，那么上方的文本就变成了中标题，同样的 下划线个数无限制。\n3、要想输入=号，上面有文本而不让其转化为大标题，则需要在两者之间加一个空行。\n另一种方法：（推荐这种方法；注意⚠️中间需要有一个空格）\n关于标题还有等级表示法，分为六个等级，显示的文本大小依次减小。不同等级之间是以井号  #  的个数来标识的。一级标题有一个 #，二级标题有两个# ，以此类推。\n例如：\n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题 \n二、编辑基本语法  \n1、字体格式强调\n 我们可以使用下面的方式给我们的文本添加强调的效果\n*强调*  (示例：斜体)  \n _强调_  (示例：斜体)  \n**加重强调**  (示例：粗体)  \n __加重强调__ (示例：粗体)  \n***特别强调*** (示例：粗斜体)  \n___特别强调___  (示例：粗斜体)  \n2、代码  \n`<hello world>`  \n\n3、代码块高亮\n(```)\n@Override\nprotected void onDestroy() {\n    EventBus.getDefault().unregister(this);\n    super.onDestroy();\n}\n(```)\n\n4、表格 （建议在表格前空一行，否则可能影响表格无法显示）\n \n 表头  | 表头  | 表头\n ---- | ----- | ------  \n 单元格内容  | 单元格内容 | 单元格内容 \n 单元格内容  | 单元格内容 | 单元格内容  \n \n5、其他引用\n图片  \n![图片名称](https://www.baidu.com/img/bd_logo1.png)  \n链接  \n[链接名称](https://www.baidu.com/)    \n6、列表 \n1. 项目1  \n2. 项目2  \n3. 项目3  \n   * 项目1 （一个*号会显示为一个黑点，注意⚠️有空格，否则直接显示为*项目1） \n   * 项目2   \n \n7、换行（建议直接在前一行后面补两个空格）\n直接回车不能换行，  \n可以在上一行文本后面补两个空格，  \n这样下一行的文本就换行了。\n或者就是在两行文本直接加一个空行。\n也能实现换行效果，不过这个行间距有点大。  \n \n8、引用\n> 第一行引用文字  \n> 第二行引用文字  \n\n```\n","slug":"markdown 语法简介","published":1,"updated":"2021-09-08T06:59:41.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cf9z000glusxbalbfvd0","content":"<pre><code class=\"markdown\">#一、标题写法：\n第一种方法：\n1、在文本下面加上 等于号 = ，那么上方的文本就变成了大标题。等于号的个数无限制，但一定要大于0个哦。。\n2、在文本下面加上 下划线 - ，那么上方的文本就变成了中标题，同样的 下划线个数无限制。\n3、要想输入=号，上面有文本而不让其转化为大标题，则需要在两者之间加一个空行。\n另一种方法：（推荐这种方法；注意⚠️中间需要有一个空格）\n关于标题还有等级表示法，分为六个等级，显示的文本大小依次减小。不同等级之间是以井号  #  的个数来标识的。一级标题有一个 #，二级标题有两个# ，以此类推。\n例如：\n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题 \n二、编辑基本语法  \n1、字体格式强调\n 我们可以使用下面的方式给我们的文本添加强调的效果\n*强调*  (示例：斜体)  \n _强调_  (示例：斜体)  \n**加重强调**  (示例：粗体)  \n __加重强调__ (示例：粗体)  \n***特别强调*** (示例：粗斜体)  \n___特别强调___  (示例：粗斜体)  \n2、代码  \n`&lt;hello world&gt;`  \n\n3、代码块高亮\n(```)\n@Override\nprotected void onDestroy() &#123;\n    EventBus.getDefault().unregister(this);\n    super.onDestroy();\n&#125;\n(```)\n\n4、表格 （建议在表格前空一行，否则可能影响表格无法显示）\n \n 表头  | 表头  | 表头\n ---- | ----- | ------  \n 单元格内容  | 单元格内容 | 单元格内容 \n 单元格内容  | 单元格内容 | 单元格内容  \n \n5、其他引用\n图片  \n![图片名称](https://www.baidu.com/img/bd_logo1.png)  \n链接  \n[链接名称](https://www.baidu.com/)    \n6、列表 \n1. 项目1  \n2. 项目2  \n3. 项目3  \n   * 项目1 （一个*号会显示为一个黑点，注意⚠️有空格，否则直接显示为*项目1） \n   * 项目2   \n \n7、换行（建议直接在前一行后面补两个空格）\n直接回车不能换行，  \n可以在上一行文本后面补两个空格，  \n这样下一行的文本就换行了。\n或者就是在两行文本直接加一个空行。\n也能实现换行效果，不过这个行间距有点大。  \n \n8、引用\n&gt; 第一行引用文字  \n&gt; 第二行引用文字  \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code class=\"markdown\">#一、标题写法：\n第一种方法：\n1、在文本下面加上 等于号 = ，那么上方的文本就变成了大标题。等于号的个数无限制，但一定要大于0个哦。。\n2、在文本下面加上 下划线 - ，那么上方的文本就变成了中标题，同样的 下划线个数无限制。\n3、要想输入=号，上面有文本而不让其转化为大标题，则需要在两者之间加一个空行。\n另一种方法：（推荐这种方法；注意⚠️中间需要有一个空格）\n关于标题还有等级表示法，分为六个等级，显示的文本大小依次减小。不同等级之间是以井号  #  的个数来标识的。一级标题有一个 #，二级标题有两个# ，以此类推。\n例如：\n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题 \n二、编辑基本语法  \n1、字体格式强调\n 我们可以使用下面的方式给我们的文本添加强调的效果\n*强调*  (示例：斜体)  \n _强调_  (示例：斜体)  \n**加重强调**  (示例：粗体)  \n __加重强调__ (示例：粗体)  \n***特别强调*** (示例：粗斜体)  \n___特别强调___  (示例：粗斜体)  \n2、代码  \n`&lt;hello world&gt;`  \n\n3、代码块高亮\n(```)\n@Override\nprotected void onDestroy() &#123;\n    EventBus.getDefault().unregister(this);\n    super.onDestroy();\n&#125;\n(```)\n\n4、表格 （建议在表格前空一行，否则可能影响表格无法显示）\n \n 表头  | 表头  | 表头\n ---- | ----- | ------  \n 单元格内容  | 单元格内容 | 单元格内容 \n 单元格内容  | 单元格内容 | 单元格内容  \n \n5、其他引用\n图片  \n![图片名称](https://www.baidu.com/img/bd_logo1.png)  \n链接  \n[链接名称](https://www.baidu.com/)    \n6、列表 \n1. 项目1  \n2. 项目2  \n3. 项目3  \n   * 项目1 （一个*号会显示为一个黑点，注意⚠️有空格，否则直接显示为*项目1） \n   * 项目2   \n \n7、换行（建议直接在前一行后面补两个空格）\n直接回车不能换行，  \n可以在上一行文本后面补两个空格，  \n这样下一行的文本就换行了。\n或者就是在两行文本直接加一个空行。\n也能实现换行效果，不过这个行间距有点大。  \n \n8、引用\n&gt; 第一行引用文字  \n&gt; 第二行引用文字  \n</code></pre>\n"},{"title":"mysql 距离函数 st_distance 使用","date":"2019-06-12T07:58:59.000Z","_content":"\n随着近几年各类移动终端的迅速普及，在手机移动定位app中，附近的人，附近的地点功能十分常见,基于地理位置的服务（LBS）和相关应用也越来越多，而支撑这些应用的最基础技术之一，就是基于地理位置信息的处理。\n\nst_distance 函数 \nst_distance 函数是从mysql5.6.1才加入的。 \nSET @g1 = POINT(1,1), @g2 = POINT(2,2); \nselect st_distance (@g1, @g2); \n输出结果：1.4142135623730951\n\n```sql\nSELECT st_distance (point (1, 1),point(2,2) ) * 111195 \n```\n\n// 输出结果：157253.47706807632 单位：米 \nst_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。\n\n当然你也可以自定义距离函数： \n```sql\nCREATE FUNCTION slc ( \nlat1 DOUBLE, \nlon1 DOUBLE, \nlat2 DOUBLE, \nlon2 DOUBLE \n) RETURNS DOUBLE RETURN 6371 * acos( \ncos(radians(lat1)) * cos(radians(lat2)) * cos( \nradians(lon2) - radians(lon1) \n) + sin(radians(lat1)) * sin(radians(lat2)) \n);\n\nSELECT slc(1,1,2,2) from DUAL \n```\n// 输出结果：157.22543203804852 km\n\n#### 应用场景: \n\n假设我当时的坐标 117.069,35.86 需要查询我附近50KM内服务区，并按照距离由近及远排列 \n\n```sql\nSELECT \ns.id,s.name,s.lng,s.lat, \n(st_distance (point (lng, lat),point(117.069,35.86) ) *111195) AS distance \nFROM \nroad_servicearea s \nHAVING distance<50 \nORDER BY distance\n```\n#### 知识科普： \n\n地球是在不停地绕地轴旋转，在地球中腰画一个与地轴垂直的大圆圈，使圈上的每一点都和南北两极的距离相等，这个圆圈就叫作“赤道”。在赤道的南北两边，画出许多和赤道平行的圆圈，就是“纬圈”；构成这些圆圈的线段，叫做纬线。我们把赤道定为纬度零度，向南向北各为90度，在赤道以南的叫南纬，在赤道以北的叫北纬。北极就是北纬90度，南极就是南纬90度。纬度的高低也标志着气候的冷热，如赤道和低纬度地地区无冬，两极和高纬度地区无夏，中纬度地区四季分明。\n\n从北极点到南极点，可以画出许多南北方向的与地球赤道垂直的大圆圈，这叫作“经圈”；构成这些圆圈的线段，就叫经线。公元1884平面坐标图年，国际上规定以通过英国伦敦近郊的格林尼治天文台的经线作为计算经度的起点，即经度零度零分零秒，也称“本初子午线”。在它东面的为东经，共180度； \n\n在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。\n","source":"_posts/mysql 距离函数 st_distance 使用.md","raw":"---\ntitle: mysql 距离函数 st_distance 使用\ndate: 2019-06-12 15:58:59\ntags:\n- mysql\n- function\n\ncategories:\n- mysql\n- function\n\n---\n\n随着近几年各类移动终端的迅速普及，在手机移动定位app中，附近的人，附近的地点功能十分常见,基于地理位置的服务（LBS）和相关应用也越来越多，而支撑这些应用的最基础技术之一，就是基于地理位置信息的处理。\n\nst_distance 函数 \nst_distance 函数是从mysql5.6.1才加入的。 \nSET @g1 = POINT(1,1), @g2 = POINT(2,2); \nselect st_distance (@g1, @g2); \n输出结果：1.4142135623730951\n\n```sql\nSELECT st_distance (point (1, 1),point(2,2) ) * 111195 \n```\n\n// 输出结果：157253.47706807632 单位：米 \nst_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。\n\n当然你也可以自定义距离函数： \n```sql\nCREATE FUNCTION slc ( \nlat1 DOUBLE, \nlon1 DOUBLE, \nlat2 DOUBLE, \nlon2 DOUBLE \n) RETURNS DOUBLE RETURN 6371 * acos( \ncos(radians(lat1)) * cos(radians(lat2)) * cos( \nradians(lon2) - radians(lon1) \n) + sin(radians(lat1)) * sin(radians(lat2)) \n);\n\nSELECT slc(1,1,2,2) from DUAL \n```\n// 输出结果：157.22543203804852 km\n\n#### 应用场景: \n\n假设我当时的坐标 117.069,35.86 需要查询我附近50KM内服务区，并按照距离由近及远排列 \n\n```sql\nSELECT \ns.id,s.name,s.lng,s.lat, \n(st_distance (point (lng, lat),point(117.069,35.86) ) *111195) AS distance \nFROM \nroad_servicearea s \nHAVING distance<50 \nORDER BY distance\n```\n#### 知识科普： \n\n地球是在不停地绕地轴旋转，在地球中腰画一个与地轴垂直的大圆圈，使圈上的每一点都和南北两极的距离相等，这个圆圈就叫作“赤道”。在赤道的南北两边，画出许多和赤道平行的圆圈，就是“纬圈”；构成这些圆圈的线段，叫做纬线。我们把赤道定为纬度零度，向南向北各为90度，在赤道以南的叫南纬，在赤道以北的叫北纬。北极就是北纬90度，南极就是南纬90度。纬度的高低也标志着气候的冷热，如赤道和低纬度地地区无冬，两极和高纬度地区无夏，中纬度地区四季分明。\n\n从北极点到南极点，可以画出许多南北方向的与地球赤道垂直的大圆圈，这叫作“经圈”；构成这些圆圈的线段，就叫经线。公元1884平面坐标图年，国际上规定以通过英国伦敦近郊的格林尼治天文台的经线作为计算经度的起点，即经度零度零分零秒，也称“本初子午线”。在它东面的为东经，共180度； \n\n在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。\n","slug":"mysql 距离函数 st_distance 使用","published":1,"updated":"2021-09-08T06:59:52.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cfa1000hlusxhsszef5w","content":"<p>随着近几年各类移动终端的迅速普及，在手机移动定位app中，附近的人，附近的地点功能十分常见,基于地理位置的服务（LBS）和相关应用也越来越多，而支撑这些应用的最基础技术之一，就是基于地理位置信息的处理。</p>\n<p>st_distance 函数<br>st_distance 函数是从mysql5.6.1才加入的。<br>SET @g1 = POINT(1,1), @g2 = POINT(2,2);<br>select st_distance (@g1, @g2);<br>输出结果：1.4142135623730951</p>\n<pre><code class=\"sql\">SELECT st_distance (point (1, 1),point(2,2) ) * 111195 \n</code></pre>\n<p>// 输出结果：157253.47706807632 单位：米<br>st_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。</p>\n<p>当然你也可以自定义距离函数： </p>\n<pre><code class=\"sql\">CREATE FUNCTION slc ( \nlat1 DOUBLE, \nlon1 DOUBLE, \nlat2 DOUBLE, \nlon2 DOUBLE \n) RETURNS DOUBLE RETURN 6371 * acos( \ncos(radians(lat1)) * cos(radians(lat2)) * cos( \nradians(lon2) - radians(lon1) \n) + sin(radians(lat1)) * sin(radians(lat2)) \n);\n\nSELECT slc(1,1,2,2) from DUAL \n</code></pre>\n<p>// 输出结果：157.22543203804852 km</p>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景:\"></a>应用场景:</h4><p>假设我当时的坐标 117.069,35.86 需要查询我附近50KM内服务区，并按照距离由近及远排列 </p>\n<pre><code class=\"sql\">SELECT \ns.id,s.name,s.lng,s.lat, \n(st_distance (point (lng, lat),point(117.069,35.86) ) *111195) AS distance \nFROM \nroad_servicearea s \nHAVING distance&lt;50 \nORDER BY distance\n</code></pre>\n<h4 id=\"知识科普：\"><a href=\"#知识科普：\" class=\"headerlink\" title=\"知识科普：\"></a>知识科普：</h4><p>地球是在不停地绕地轴旋转，在地球中腰画一个与地轴垂直的大圆圈，使圈上的每一点都和南北两极的距离相等，这个圆圈就叫作“赤道”。在赤道的南北两边，画出许多和赤道平行的圆圈，就是“纬圈”；构成这些圆圈的线段，叫做纬线。我们把赤道定为纬度零度，向南向北各为90度，在赤道以南的叫南纬，在赤道以北的叫北纬。北极就是北纬90度，南极就是南纬90度。纬度的高低也标志着气候的冷热，如赤道和低纬度地地区无冬，两极和高纬度地区无夏，中纬度地区四季分明。</p>\n<p>从北极点到南极点，可以画出许多南北方向的与地球赤道垂直的大圆圈，这叫作“经圈”；构成这些圆圈的线段，就叫经线。公元1884平面坐标图年，国际上规定以通过英国伦敦近郊的格林尼治天文台的经线作为计算经度的起点，即经度零度零分零秒，也称“本初子午线”。在它东面的为东经，共180度； </p>\n<p>在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>随着近几年各类移动终端的迅速普及，在手机移动定位app中，附近的人，附近的地点功能十分常见,基于地理位置的服务（LBS）和相关应用也越来越多，而支撑这些应用的最基础技术之一，就是基于地理位置信息的处理。</p>\n<p>st_distance 函数<br>st_distance 函数是从mysql5.6.1才加入的。<br>SET @g1 = POINT(1,1), @g2 = POINT(2,2);<br>select st_distance (@g1, @g2);<br>输出结果：1.4142135623730951</p>\n<pre><code class=\"sql\">SELECT st_distance (point (1, 1),point(2,2) ) * 111195 \n</code></pre>\n<p>// 输出结果：157253.47706807632 单位：米<br>st_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。</p>\n<p>当然你也可以自定义距离函数： </p>\n<pre><code class=\"sql\">CREATE FUNCTION slc ( \nlat1 DOUBLE, \nlon1 DOUBLE, \nlat2 DOUBLE, \nlon2 DOUBLE \n) RETURNS DOUBLE RETURN 6371 * acos( \ncos(radians(lat1)) * cos(radians(lat2)) * cos( \nradians(lon2) - radians(lon1) \n) + sin(radians(lat1)) * sin(radians(lat2)) \n);\n\nSELECT slc(1,1,2,2) from DUAL \n</code></pre>\n<p>// 输出结果：157.22543203804852 km</p>\n<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景:\"></a>应用场景:</h4><p>假设我当时的坐标 117.069,35.86 需要查询我附近50KM内服务区，并按照距离由近及远排列 </p>\n<pre><code class=\"sql\">SELECT \ns.id,s.name,s.lng,s.lat, \n(st_distance (point (lng, lat),point(117.069,35.86) ) *111195) AS distance \nFROM \nroad_servicearea s \nHAVING distance&lt;50 \nORDER BY distance\n</code></pre>\n<h4 id=\"知识科普：\"><a href=\"#知识科普：\" class=\"headerlink\" title=\"知识科普：\"></a>知识科普：</h4><p>地球是在不停地绕地轴旋转，在地球中腰画一个与地轴垂直的大圆圈，使圈上的每一点都和南北两极的距离相等，这个圆圈就叫作“赤道”。在赤道的南北两边，画出许多和赤道平行的圆圈，就是“纬圈”；构成这些圆圈的线段，叫做纬线。我们把赤道定为纬度零度，向南向北各为90度，在赤道以南的叫南纬，在赤道以北的叫北纬。北极就是北纬90度，南极就是南纬90度。纬度的高低也标志着气候的冷热，如赤道和低纬度地地区无冬，两极和高纬度地区无夏，中纬度地区四季分明。</p>\n<p>从北极点到南极点，可以画出许多南北方向的与地球赤道垂直的大圆圈，这叫作“经圈”；构成这些圆圈的线段，就叫经线。公元1884平面坐标图年，国际上规定以通过英国伦敦近郊的格林尼治天文台的经线作为计算经度的起点，即经度零度零分零秒，也称“本初子午线”。在它东面的为东经，共180度； </p>\n<p>在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。</p>\n"},{"title":"python 正则表达式简介","date":"2017-11-13T09:21:05.000Z","auto_excerpt":{"enable":true,"length":150},"_content":"\n\n### 1. 概念：\n正则表达式（或 RE）是一种小型的、高度专业化的编程语言，（在Python中）它内嵌在Python中，并通过 re 模块实现。使用这个小型语言， 你可以为想要匹配的相应字符串集指定规则；该字符串集可能包含英文语句、email 地址、TeX命令或任何你想搞定的东西。然后你可以问诸如“这个字符串匹配该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。你也可以使用 RE 以各种方式来修改或分割字符串。\n\n### 2. 在正则表达式中， 如下的字符是具有特殊含义的\n\t. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) { } [  ]  \\  |  ( ) \n\t   1).\"[\" 和 \"]\"。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集\n\t   2).其它地方的\"^\"只会简单匹配 \"^\"字符本身。例[^5] 将匹配除 \"5\" 之外的任意字符。\n\t   3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符\n\n### 3. RE 函数用法:\n       findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。\n       match() 决定 RE 是否在字符串刚开始的位置匹配\n       search() 扫描字符串，找到这个 RE 匹配的位置\n       findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回\n       finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回\n       group() 返回被 RE 匹配的字符串\n       start() 返回匹配开始的位置\n       end() 返回匹配结束的位置\n       span() 返回一个元组包含匹配 (开始,结束) 的位置\n       compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数是规则式，第二个参数是规则选项。(使用compile加速)\n\n### 4. 含义:\n\t预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定\n\n字符的形式,用来指示一个预定义好的含义\n```\n\t‘^’  和’$’ 匹配字符串开头和结尾\n\t‘.’    匹配所有字符 除\\n以外\n\t‘\\d’  匹配数字\n\t‘\\D’  匹配非数字\n\t‘\\w’  匹配字母和数字\n\t‘\\W’  匹配非英文字母和数字\n\t‘\\s’   匹配间隔符\n\t‘\\S’   匹配非间隔符\n\t‘\\A’  匹配字符串开头\n\t‘\\Z’  匹配字符串结尾\n\t‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就是用空白符或非字母数字符来标示的。(退格)\n\t‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n```\n### 5. 前向界定与后向界定:\n```\n\t‘(?<=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n\t‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n\t‘(?<!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n\t‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n```\n### 6. 组的基本知识:\n```\n\t‘(‘’)’           无命名组            [a-z]+(\\d+)[a-z]+\n\t‘(?P<name>…)’    命名组                    (?P<g1>[a-z]+)\\d+(?P=g1)\n\t‘(?P=name)’      调用已匹配的命名组\n\t‘\\number’        通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组\n( r\"(\\d+)([a-z]+)(\\d+)(\\2)(\\1)\" )   \n```\n","source":"_posts/python 正则表达式简介.md","raw":"---\ntitle: python 正则表达式简介\ndate: 2017-11-13 17:21:05\ntags:\n- regex\n- python\n\ncategories:\n- python\n- regex\n\nauto_excerpt:\n  enable: true\n  length: 150\n---\n\n\n### 1. 概念：\n正则表达式（或 RE）是一种小型的、高度专业化的编程语言，（在Python中）它内嵌在Python中，并通过 re 模块实现。使用这个小型语言， 你可以为想要匹配的相应字符串集指定规则；该字符串集可能包含英文语句、email 地址、TeX命令或任何你想搞定的东西。然后你可以问诸如“这个字符串匹配该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。你也可以使用 RE 以各种方式来修改或分割字符串。\n\n### 2. 在正则表达式中， 如下的字符是具有特殊含义的\n\t. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) { } [  ]  \\  |  ( ) \n\t   1).\"[\" 和 \"]\"。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集\n\t   2).其它地方的\"^\"只会简单匹配 \"^\"字符本身。例[^5] 将匹配除 \"5\" 之外的任意字符。\n\t   3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符\n\n### 3. RE 函数用法:\n       findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。\n       match() 决定 RE 是否在字符串刚开始的位置匹配\n       search() 扫描字符串，找到这个 RE 匹配的位置\n       findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回\n       finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回\n       group() 返回被 RE 匹配的字符串\n       start() 返回匹配开始的位置\n       end() 返回匹配结束的位置\n       span() 返回一个元组包含匹配 (开始,结束) 的位置\n       compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数是规则式，第二个参数是规则选项。(使用compile加速)\n\n### 4. 含义:\n\t预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定\n\n字符的形式,用来指示一个预定义好的含义\n```\n\t‘^’  和’$’ 匹配字符串开头和结尾\n\t‘.’    匹配所有字符 除\\n以外\n\t‘\\d’  匹配数字\n\t‘\\D’  匹配非数字\n\t‘\\w’  匹配字母和数字\n\t‘\\W’  匹配非英文字母和数字\n\t‘\\s’   匹配间隔符\n\t‘\\S’   匹配非间隔符\n\t‘\\A’  匹配字符串开头\n\t‘\\Z’  匹配字符串结尾\n\t‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就是用空白符或非字母数字符来标示的。(退格)\n\t‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n```\n### 5. 前向界定与后向界定:\n```\n\t‘(?<=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n\t‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n\t‘(?<!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n\t‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n```\n### 6. 组的基本知识:\n```\n\t‘(‘’)’           无命名组            [a-z]+(\\d+)[a-z]+\n\t‘(?P<name>…)’    命名组                    (?P<g1>[a-z]+)\\d+(?P=g1)\n\t‘(?P=name)’      调用已匹配的命名组\n\t‘\\number’        通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组\n( r\"(\\d+)([a-z]+)(\\d+)(\\2)(\\1)\" )   \n```\n","slug":"python 正则表达式简介","published":1,"updated":"2021-09-08T07:01:07.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cfa2000klusx9ftw22to","content":"<h3 id=\"1-概念：\"><a href=\"#1-概念：\" class=\"headerlink\" title=\"1. 概念：\"></a>1. 概念：</h3><p>正则表达式（或 RE）是一种小型的、高度专业化的编程语言，（在Python中）它内嵌在Python中，并通过 re 模块实现。使用这个小型语言， 你可以为想要匹配的相应字符串集指定规则；该字符串集可能包含英文语句、email 地址、TeX命令或任何你想搞定的东西。然后你可以问诸如“这个字符串匹配该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。你也可以使用 RE 以各种方式来修改或分割字符串。</p>\n<h3 id=\"2-在正则表达式中，-如下的字符是具有特殊含义的\"><a href=\"#2-在正则表达式中，-如下的字符是具有特殊含义的\" class=\"headerlink\" title=\"2. 在正则表达式中， 如下的字符是具有特殊含义的\"></a>2. 在正则表达式中， 如下的字符是具有特殊含义的</h3><pre><code>. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) &#123; &#125; [  ]  \\  |  ( ) \n   1).&quot;[&quot; 和 &quot;]&quot;。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集\n   2).其它地方的&quot;^&quot;只会简单匹配 &quot;^&quot;字符本身。例[^5] 将匹配除 &quot;5&quot; 之外的任意字符。\n   3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符\n</code></pre>\n<h3 id=\"3-RE-函数用法\"><a href=\"#3-RE-函数用法\" class=\"headerlink\" title=\"3. RE 函数用法:\"></a>3. RE 函数用法:</h3><pre><code>   findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。\n   match() 决定 RE 是否在字符串刚开始的位置匹配\n   search() 扫描字符串，找到这个 RE 匹配的位置\n   findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回\n   finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回\n   group() 返回被 RE 匹配的字符串\n   start() 返回匹配开始的位置\n   end() 返回匹配结束的位置\n   span() 返回一个元组包含匹配 (开始,结束) 的位置\n   compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数是规则式，第二个参数是规则选项。(使用compile加速)\n</code></pre>\n<h3 id=\"4-含义\"><a href=\"#4-含义\" class=\"headerlink\" title=\"4. 含义:\"></a>4. 含义:</h3><pre><code>预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定\n</code></pre>\n<p>字符的形式,用来指示一个预定义好的含义</p>\n<pre><code>    ‘^’  和’$’ 匹配字符串开头和结尾\n    ‘.’    匹配所有字符 除\\n以外\n    ‘\\d’  匹配数字\n    ‘\\D’  匹配非数字\n    ‘\\w’  匹配字母和数字\n    ‘\\W’  匹配非英文字母和数字\n    ‘\\s’   匹配间隔符\n    ‘\\S’   匹配非间隔符\n    ‘\\A’  匹配字符串开头\n    ‘\\Z’  匹配字符串结尾\n    ‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就是用空白符或非字母数字符来标示的。(退格)\n    ‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n</code></pre>\n<h3 id=\"5-前向界定与后向界定\"><a href=\"#5-前向界定与后向界定\" class=\"headerlink\" title=\"5. 前向界定与后向界定:\"></a>5. 前向界定与后向界定:</h3><pre><code>    ‘(?&lt;=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n    ‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n    ‘(?&lt;!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n    ‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n</code></pre>\n<h3 id=\"6-组的基本知识\"><a href=\"#6-组的基本知识\" class=\"headerlink\" title=\"6. 组的基本知识:\"></a>6. 组的基本知识:</h3><pre><code>    ‘(‘’)’           无命名组            [a-z]+(\\d+)[a-z]+\n    ‘(?P&lt;name&gt;…)’    命名组                    (?P&lt;g1&gt;[a-z]+)\\d+(?P=g1)\n    ‘(?P=name)’      调用已匹配的命名组\n    ‘\\number’        通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组\n( r&quot;(\\d+)([a-z]+)(\\d+)(\\2)(\\1)&quot; )   \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-概念：\"><a href=\"#1-概念：\" class=\"headerlink\" title=\"1. 概念：\"></a>1. 概念：</h3><p>正则表达式（或 RE）是一种小型的、高度专业化的编程语言，（在Python中）它内嵌在Python中，并通过 re 模块实现。使用这个小型语言， 你可以为想要匹配的相应字符串集指定规则；该字符串集可能包含英文语句、email 地址、TeX命令或任何你想搞定的东西。然后你可以问诸如“这个字符串匹配该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。你也可以使用 RE 以各种方式来修改或分割字符串。</p>\n<h3 id=\"2-在正则表达式中，-如下的字符是具有特殊含义的\"><a href=\"#2-在正则表达式中，-如下的字符是具有特殊含义的\" class=\"headerlink\" title=\"2. 在正则表达式中， 如下的字符是具有特殊含义的\"></a>2. 在正则表达式中， 如下的字符是具有特殊含义的</h3><pre><code>. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) &#123; &#125; [  ]  \\  |  ( ) \n   1).&quot;[&quot; 和 &quot;]&quot;。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集\n   2).其它地方的&quot;^&quot;只会简单匹配 &quot;^&quot;字符本身。例[^5] 将匹配除 &quot;5&quot; 之外的任意字符。\n   3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符\n</code></pre>\n<h3 id=\"3-RE-函数用法\"><a href=\"#3-RE-函数用法\" class=\"headerlink\" title=\"3. RE 函数用法:\"></a>3. RE 函数用法:</h3><pre><code>   findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。\n   match() 决定 RE 是否在字符串刚开始的位置匹配\n   search() 扫描字符串，找到这个 RE 匹配的位置\n   findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回\n   finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回\n   group() 返回被 RE 匹配的字符串\n   start() 返回匹配开始的位置\n   end() 返回匹配结束的位置\n   span() 返回一个元组包含匹配 (开始,结束) 的位置\n   compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数是规则式，第二个参数是规则选项。(使用compile加速)\n</code></pre>\n<h3 id=\"4-含义\"><a href=\"#4-含义\" class=\"headerlink\" title=\"4. 含义:\"></a>4. 含义:</h3><pre><code>预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定\n</code></pre>\n<p>字符的形式,用来指示一个预定义好的含义</p>\n<pre><code>    ‘^’  和’$’ 匹配字符串开头和结尾\n    ‘.’    匹配所有字符 除\\n以外\n    ‘\\d’  匹配数字\n    ‘\\D’  匹配非数字\n    ‘\\w’  匹配字母和数字\n    ‘\\W’  匹配非英文字母和数字\n    ‘\\s’   匹配间隔符\n    ‘\\S’   匹配非间隔符\n    ‘\\A’  匹配字符串开头\n    ‘\\Z’  匹配字符串结尾\n    ‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就是用空白符或非字母数字符来标示的。(退格)\n    ‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n</code></pre>\n<h3 id=\"5-前向界定与后向界定\"><a href=\"#5-前向界定与后向界定\" class=\"headerlink\" title=\"5. 前向界定与后向界定:\"></a>5. 前向界定与后向界定:</h3><pre><code>    ‘(?&lt;=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n    ‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n    ‘(?&lt;!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n    ‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n</code></pre>\n<h3 id=\"6-组的基本知识\"><a href=\"#6-组的基本知识\" class=\"headerlink\" title=\"6. 组的基本知识:\"></a>6. 组的基本知识:</h3><pre><code>    ‘(‘’)’           无命名组            [a-z]+(\\d+)[a-z]+\n    ‘(?P&lt;name&gt;…)’    命名组                    (?P&lt;g1&gt;[a-z]+)\\d+(?P=g1)\n    ‘(?P=name)’      调用已匹配的命名组\n    ‘\\number’        通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组\n( r&quot;(\\d+)([a-z]+)(\\d+)(\\2)(\\1)&quot; )   \n</code></pre>\n"},{"title":"redis 详解","auto_excerpt":{"enable":true,"length":150},"date":"2021-09-08T07:22:26.000Z","_content":"\n\n\n[toc]\n\n### redis 介绍\n\n官网地址：[https://redis.io/](https://redis.io/)\n\nRedis的全称是 **RE**mote **DI**ctionary **S**erver，是一个高效的内存键值数据库，常被用来做分布式的高速缓存，相比较我们常规使用的Mysql、MongoDB等数据库，Redis的最大特点在于数据读写全部在内存中进行，进而带来极大的效率优势。\n\n### redis 使用场景\n\n1. 作为缓存服务器（String, Hash）\n2. 作为消息队列（List）\n3. 数据排行榜（Sorted Set）\n4. 热点数据\n5. 计数器； 比如统计点击率、点赞率，Redis具有原子性，可以避免并发问题。\n\n以前只列出简单且常见的用途\n\n### redis 数据类型\n\n**String、List、Hash、Set、Sorted Set** 五种数据类型\n\n**String**\nString和我们常规理解的字符串基本一致，主要存储序列化后的字符串，支持写入原生字符串也支持写入数字类型。\n\n**List**\nList即为列表，List在Redis底层采用的是**双向链表**实现的，所以我们会发现Redis的List操作命令有左右之分，比如LPUSH、RPUSH，实际上就是双端列表左右两端的存取。\n\n**Hash**\nHash可以理解为我们常规使用的字典数据结构，Redis采用**散列表**来实现Hash， 一个Hash结构里面可以存在很多的key和value，Hash是Redis比较推荐使用的一种数据结构\n\n**Set**\nSet是集合，满足集合确定性、无序性、唯一性三个性质，可以用来进行元素的去重操作\n\n**Sorted Set**\nSorted Set是有序集合，满足集合唯一性的要求，同时也满足有序的性质。向Sorted Set中插入元素的时候需要同时指定一个Score，用于作为排序的标准， Sorted Set的底层实现采用的是**Skip List**\n\n### redis 命令\n\n---\n\n参考：\n\n1. [Redis详解（1）——为什么我们都需要了解Redis](https://zhuanlan.zhihu.com/p/94680529)\n\n---\n","source":"_posts/redis-详解.md","raw":"---\ntitle: redis 详解\nauto_excerpt:\n  enable: true\n  length: 150\ndate: 2021-09-08 15:22:26\ntags:\ncategories:\n---\n\n\n\n[toc]\n\n### redis 介绍\n\n官网地址：[https://redis.io/](https://redis.io/)\n\nRedis的全称是 **RE**mote **DI**ctionary **S**erver，是一个高效的内存键值数据库，常被用来做分布式的高速缓存，相比较我们常规使用的Mysql、MongoDB等数据库，Redis的最大特点在于数据读写全部在内存中进行，进而带来极大的效率优势。\n\n### redis 使用场景\n\n1. 作为缓存服务器（String, Hash）\n2. 作为消息队列（List）\n3. 数据排行榜（Sorted Set）\n4. 热点数据\n5. 计数器； 比如统计点击率、点赞率，Redis具有原子性，可以避免并发问题。\n\n以前只列出简单且常见的用途\n\n### redis 数据类型\n\n**String、List、Hash、Set、Sorted Set** 五种数据类型\n\n**String**\nString和我们常规理解的字符串基本一致，主要存储序列化后的字符串，支持写入原生字符串也支持写入数字类型。\n\n**List**\nList即为列表，List在Redis底层采用的是**双向链表**实现的，所以我们会发现Redis的List操作命令有左右之分，比如LPUSH、RPUSH，实际上就是双端列表左右两端的存取。\n\n**Hash**\nHash可以理解为我们常规使用的字典数据结构，Redis采用**散列表**来实现Hash， 一个Hash结构里面可以存在很多的key和value，Hash是Redis比较推荐使用的一种数据结构\n\n**Set**\nSet是集合，满足集合确定性、无序性、唯一性三个性质，可以用来进行元素的去重操作\n\n**Sorted Set**\nSorted Set是有序集合，满足集合唯一性的要求，同时也满足有序的性质。向Sorted Set中插入元素的时候需要同时指定一个Score，用于作为排序的标准， Sorted Set的底层实现采用的是**Skip List**\n\n### redis 命令\n\n---\n\n参考：\n\n1. [Redis详解（1）——为什么我们都需要了解Redis](https://zhuanlan.zhihu.com/p/94680529)\n\n---\n","slug":"redis-详解","published":1,"updated":"2021-09-08T08:00:39.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cfa3000llusxghnv4kz4","content":"<p>[toc]</p>\n<h3 id=\"redis-介绍\"><a href=\"#redis-介绍\" class=\"headerlink\" title=\"redis 介绍\"></a>redis 介绍</h3><p>官网地址：<a href=\"https://redis.io/\">https://redis.io/</a></p>\n<p>Redis的全称是 <strong>RE</strong>mote <strong>DI</strong>ctionary <strong>S</strong>erver，是一个高效的内存键值数据库，常被用来做分布式的高速缓存，相比较我们常规使用的Mysql、MongoDB等数据库，Redis的最大特点在于数据读写全部在内存中进行，进而带来极大的效率优势。</p>\n<h3 id=\"redis-使用场景\"><a href=\"#redis-使用场景\" class=\"headerlink\" title=\"redis 使用场景\"></a>redis 使用场景</h3><ol>\n<li>作为缓存服务器（String, Hash）</li>\n<li>作为消息队列（List）</li>\n<li>数据排行榜（Sorted Set）</li>\n<li>热点数据</li>\n<li>计数器； 比如统计点击率、点赞率，Redis具有原子性，可以避免并发问题。</li>\n</ol>\n<p>以前只列出简单且常见的用途</p>\n<h3 id=\"redis-数据类型\"><a href=\"#redis-数据类型\" class=\"headerlink\" title=\"redis 数据类型\"></a>redis 数据类型</h3><p><strong>String、List、Hash、Set、Sorted Set</strong> 五种数据类型</p>\n<p><strong>String</strong><br>String和我们常规理解的字符串基本一致，主要存储序列化后的字符串，支持写入原生字符串也支持写入数字类型。</p>\n<p><strong>List</strong><br>List即为列表，List在Redis底层采用的是<strong>双向链表</strong>实现的，所以我们会发现Redis的List操作命令有左右之分，比如LPUSH、RPUSH，实际上就是双端列表左右两端的存取。</p>\n<p><strong>Hash</strong><br>Hash可以理解为我们常规使用的字典数据结构，Redis采用<strong>散列表</strong>来实现Hash， 一个Hash结构里面可以存在很多的key和value，Hash是Redis比较推荐使用的一种数据结构</p>\n<p><strong>Set</strong><br>Set是集合，满足集合确定性、无序性、唯一性三个性质，可以用来进行元素的去重操作</p>\n<p><strong>Sorted Set</strong><br>Sorted Set是有序集合，满足集合唯一性的要求，同时也满足有序的性质。向Sorted Set中插入元素的时候需要同时指定一个Score，用于作为排序的标准， Sorted Set的底层实现采用的是<strong>Skip List</strong></p>\n<h3 id=\"redis-命令\"><a href=\"#redis-命令\" class=\"headerlink\" title=\"redis 命令\"></a>redis 命令</h3><hr>\n<p>参考：</p>\n<ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/94680529\">Redis详解（1）——为什么我们都需要了解Redis</a></li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h3 id=\"redis-介绍\"><a href=\"#redis-介绍\" class=\"headerlink\" title=\"redis 介绍\"></a>redis 介绍</h3><p>官网地址：<a href=\"https://redis.io/\">https://redis.io/</a></p>\n<p>Redis的全称是 <strong>RE</strong>mote <strong>DI</strong>ctionary <strong>S</strong>erver，是一个高效的内存键值数据库，常被用来做分布式的高速缓存，相比较我们常规使用的Mysql、MongoDB等数据库，Redis的最大特点在于数据读写全部在内存中进行，进而带来极大的效率优势。</p>\n<h3 id=\"redis-使用场景\"><a href=\"#redis-使用场景\" class=\"headerlink\" title=\"redis 使用场景\"></a>redis 使用场景</h3><ol>\n<li>作为缓存服务器（String, Hash）</li>\n<li>作为消息队列（List）</li>\n<li>数据排行榜（Sorted Set）</li>\n<li>热点数据</li>\n<li>计数器； 比如统计点击率、点赞率，Redis具有原子性，可以避免并发问题。</li>\n</ol>\n<p>以前只列出简单且常见的用途</p>\n<h3 id=\"redis-数据类型\"><a href=\"#redis-数据类型\" class=\"headerlink\" title=\"redis 数据类型\"></a>redis 数据类型</h3><p><strong>String、List、Hash、Set、Sorted Set</strong> 五种数据类型</p>\n<p><strong>String</strong><br>String和我们常规理解的字符串基本一致，主要存储序列化后的字符串，支持写入原生字符串也支持写入数字类型。</p>\n<p><strong>List</strong><br>List即为列表，List在Redis底层采用的是<strong>双向链表</strong>实现的，所以我们会发现Redis的List操作命令有左右之分，比如LPUSH、RPUSH，实际上就是双端列表左右两端的存取。</p>\n<p><strong>Hash</strong><br>Hash可以理解为我们常规使用的字典数据结构，Redis采用<strong>散列表</strong>来实现Hash， 一个Hash结构里面可以存在很多的key和value，Hash是Redis比较推荐使用的一种数据结构</p>\n<p><strong>Set</strong><br>Set是集合，满足集合确定性、无序性、唯一性三个性质，可以用来进行元素的去重操作</p>\n<p><strong>Sorted Set</strong><br>Sorted Set是有序集合，满足集合唯一性的要求，同时也满足有序的性质。向Sorted Set中插入元素的时候需要同时指定一个Score，用于作为排序的标准， Sorted Set的底层实现采用的是<strong>Skip List</strong></p>\n<h3 id=\"redis-命令\"><a href=\"#redis-命令\" class=\"headerlink\" title=\"redis 命令\"></a>redis 命令</h3><hr>\n<p>参考：</p>\n<ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/94680529\">Redis详解（1）——为什么我们都需要了解Redis</a></li>\n</ol>\n<hr>\n"},{"title":"网站收藏","date":"2019-06-04T08:20:14.000Z","auto_excerpt":{"enable":true,"length":150},"_content":"\n[toc]\n\n### 官网\n\nhexo  [[https://hexo.io](https://hexo.io)\n\nredis [https://redis.io/](https://redis.io/)\n\ngit [https://git-scm.com/book/zh/v2](https://git-scm.com/book/zh/v2)\n\ngolang [https://golang.google.cn/](https://golang.google.cn/)\n\n### API 网站\n\nhexo [https://hexo.io/api/](https://hexo.io/api/)\n\nredis [https://redis.io](https://redis.io)\n\ngorm golang orm  [https://gorm.io/zh_CN/](https://gorm.io/zh_CN/)\n\nmarkdown [https://markdown.com.cn/](https://markdown.com.cn/)\n\n\n\n### 工具网站\n\nexcalidraw 在线作图 [https://excalidraw.com/](https://excalidraw.com/)\n\noktools [https://oktools.net/](https://oktools.net/)\n\njson2go  [https://oktools.net/json2go](https://oktools.net/json2go)\n\nprocesson 在线作图 [https://www.processon.com/](https://www.processon.com/)\n\n\n\n### 其他\n\nmacwk Mac 软件下载 [https://macwk.com/](https://macwk.com/)\n\n","source":"_posts/网站收藏.md","raw":"---\ntitle: 网站收藏\ndate: 2019-06-04 16:20:14\ntags:\n- site\n- api\n\ncategories:\n- site\n\nauto_excerpt:\n  enable: true\n  length: 150\n---\n\n[toc]\n\n### 官网\n\nhexo  [[https://hexo.io](https://hexo.io)\n\nredis [https://redis.io/](https://redis.io/)\n\ngit [https://git-scm.com/book/zh/v2](https://git-scm.com/book/zh/v2)\n\ngolang [https://golang.google.cn/](https://golang.google.cn/)\n\n### API 网站\n\nhexo [https://hexo.io/api/](https://hexo.io/api/)\n\nredis [https://redis.io](https://redis.io)\n\ngorm golang orm  [https://gorm.io/zh_CN/](https://gorm.io/zh_CN/)\n\nmarkdown [https://markdown.com.cn/](https://markdown.com.cn/)\n\n\n\n### 工具网站\n\nexcalidraw 在线作图 [https://excalidraw.com/](https://excalidraw.com/)\n\noktools [https://oktools.net/](https://oktools.net/)\n\njson2go  [https://oktools.net/json2go](https://oktools.net/json2go)\n\nprocesson 在线作图 [https://www.processon.com/](https://www.processon.com/)\n\n\n\n### 其他\n\nmacwk Mac 软件下载 [https://macwk.com/](https://macwk.com/)\n\n","slug":"网站收藏","published":1,"updated":"2021-09-08T08:44:34.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktb9cfa4000plusxbf1j2dwe","content":"<p>[toc]</p>\n<h3 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h3><p>hexo  [<a href=\"https://hexo.io/\">https://hexo.io</a></p>\n<p>redis <a href=\"https://redis.io/\">https://redis.io/</a></p>\n<p>git <a href=\"https://git-scm.com/book/zh/v2\">https://git-scm.com/book/zh/v2</a></p>\n<p>golang <a href=\"https://golang.google.cn/\">https://golang.google.cn/</a></p>\n<h3 id=\"API-网站\"><a href=\"#API-网站\" class=\"headerlink\" title=\"API 网站\"></a>API 网站</h3><p>hexo <a href=\"https://hexo.io/api/\">https://hexo.io/api/</a></p>\n<p>redis <a href=\"https://redis.io/\">https://redis.io</a></p>\n<p>gorm golang orm  <a href=\"https://gorm.io/zh_CN/\">https://gorm.io/zh_CN/</a></p>\n<p>markdown <a href=\"https://markdown.com.cn/\">https://markdown.com.cn/</a></p>\n<h3 id=\"工具网站\"><a href=\"#工具网站\" class=\"headerlink\" title=\"工具网站\"></a>工具网站</h3><p>excalidraw 在线作图 <a href=\"https://excalidraw.com/\">https://excalidraw.com/</a></p>\n<p>oktools <a href=\"https://oktools.net/\">https://oktools.net/</a></p>\n<p>json2go  <a href=\"https://oktools.net/json2go\">https://oktools.net/json2go</a></p>\n<p>processon 在线作图 <a href=\"https://www.processon.com/\">https://www.processon.com/</a></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>macwk Mac 软件下载 <a href=\"https://macwk.com/\">https://macwk.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h3 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h3><p>hexo  [<a href=\"https://hexo.io/\">https://hexo.io</a></p>\n<p>redis <a href=\"https://redis.io/\">https://redis.io/</a></p>\n<p>git <a href=\"https://git-scm.com/book/zh/v2\">https://git-scm.com/book/zh/v2</a></p>\n<p>golang <a href=\"https://golang.google.cn/\">https://golang.google.cn/</a></p>\n<h3 id=\"API-网站\"><a href=\"#API-网站\" class=\"headerlink\" title=\"API 网站\"></a>API 网站</h3><p>hexo <a href=\"https://hexo.io/api/\">https://hexo.io/api/</a></p>\n<p>redis <a href=\"https://redis.io/\">https://redis.io</a></p>\n<p>gorm golang orm  <a href=\"https://gorm.io/zh_CN/\">https://gorm.io/zh_CN/</a></p>\n<p>markdown <a href=\"https://markdown.com.cn/\">https://markdown.com.cn/</a></p>\n<h3 id=\"工具网站\"><a href=\"#工具网站\" class=\"headerlink\" title=\"工具网站\"></a>工具网站</h3><p>excalidraw 在线作图 <a href=\"https://excalidraw.com/\">https://excalidraw.com/</a></p>\n<p>oktools <a href=\"https://oktools.net/\">https://oktools.net/</a></p>\n<p>json2go  <a href=\"https://oktools.net/json2go\">https://oktools.net/json2go</a></p>\n<p>processon 在线作图 <a href=\"https://www.processon.com/\">https://www.processon.com/</a></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>macwk Mac 软件下载 <a href=\"https://macwk.com/\">https://macwk.com/</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cktb9cf9n0001lusxfsp6dqdk","category_id":"cktb9cf9r0003lusxd10zfctn","_id":"cktb9cf9x000dlusx2ok43inj"},{"post_id":"cktb9cf9t0005lusx3i1y0wd5","category_id":"cktb9cf9v0008lusxbsx5cbsr","_id":"cktb9cfa4000nlusx8nan85f3"},{"post_id":"cktb9cf9u0006lusx68m0den8","category_id":"cktb9cf9v0008lusxbsx5cbsr","_id":"cktb9cfa5000rlusx4kwc1k52"},{"post_id":"cktb9cf9v0007lusx9rd40ayc","category_id":"cktb9cf9v0008lusxbsx5cbsr","_id":"cktb9cfa6000ulusxgyh33b8u"},{"post_id":"cktb9cf9w000blusxchmd55kl","category_id":"cktb9cf9v0008lusxbsx5cbsr","_id":"cktb9cfa7000zlusxgpmr3mfa"},{"post_id":"cktb9cf9w000blusxchmd55kl","category_id":"cktb9cfa5000qlusxagfg5qxe","_id":"cktb9cfa80013lusx4oi8bnas"},{"post_id":"cktb9cf9q0002lusx7kkk3jb9","category_id":"cktb9cf9v0008lusxbsx5cbsr","_id":"cktb9cfa80015lusx7usw47lr"},{"post_id":"cktb9cf9q0002lusx7kkk3jb9","category_id":"cktb9cfa6000vlusx4sbtc8xw","_id":"cktb9cfa90019lusxb1ipgnqe"},{"post_id":"cktb9cfa4000plusxbf1j2dwe","category_id":"cktb9cfaa001hlusxg1fs7gcy","_id":"cktb9cfac001nlusx6kybd6k4"},{"post_id":"cktb9cf9x000clusxa5fqfnh7","category_id":"cktb9cfa70010lusx39f6g2f0","_id":"cktb9cfad001slusxattedxu6"},{"post_id":"cktb9cf9x000clusxa5fqfnh7","category_id":"cktb9cfab001mlusx90j884et","_id":"cktb9cfad001vlusx0b9s4jd8"},{"post_id":"cktb9cf9z000glusxbalbfvd0","category_id":"cktb9cfa80016lusx96tu4wqs","_id":"cktb9cfae001wlusx7nt417w8"},{"post_id":"cktb9cf9z000glusxbalbfvd0","category_id":"cktb9cfac001plusxc5u7hm6m","_id":"cktb9cfae0020lusx5utodqbx"},{"post_id":"cktb9cfa1000hlusxhsszef5w","category_id":"cktb9cfa9001alusx82bb4fd0","_id":"cktb9cfae0022lusxca9ufpla"},{"post_id":"cktb9cfa1000hlusxhsszef5w","category_id":"cktb9cfad001ulusx6zwgh857","_id":"cktb9cfaf0024lusx1opf75p7"},{"post_id":"cktb9cfa2000klusx9ftw22to","category_id":"cktb9cfaa001elusx9uf5aamo","_id":"cktb9cfaf0025lusxgq954cns"},{"post_id":"cktb9cfa2000klusx9ftw22to","category_id":"cktb9cfae001ylusxcx2bdksl","_id":"cktb9cfah0028lusx9imw17ll"}],"PostTag":[{"post_id":"cktb9cf9n0001lusxfsp6dqdk","tag_id":"cktb9cf9s0004lusxezisb7ft","_id":"cktb9cf9w000alusxh8mxdmkv"},{"post_id":"cktb9cf9q0002lusx7kkk3jb9","tag_id":"cktb9cf9v0009lusxaz5g9aru","_id":"cktb9cfa6000tlusx1t620cbm"},{"post_id":"cktb9cf9q0002lusx7kkk3jb9","tag_id":"cktb9cf9y000flusxd6uweoz8","_id":"cktb9cfa6000wlusx2o715w0f"},{"post_id":"cktb9cf9q0002lusx7kkk3jb9","tag_id":"cktb9cfa2000jlusxea7w1f6b","_id":"cktb9cfa7000ylusx0o5136mf"},{"post_id":"cktb9cf9q0002lusx7kkk3jb9","tag_id":"cktb9cfa4000olusx6dtn84c8","_id":"cktb9cfa70011lusxasgn6eyb"},{"post_id":"cktb9cf9t0005lusx3i1y0wd5","tag_id":"cktb9cf9v0009lusxaz5g9aru","_id":"cktb9cfa80014lusx6uzqaysk"},{"post_id":"cktb9cf9t0005lusx3i1y0wd5","tag_id":"cktb9cfa7000xlusxcqpzfccc","_id":"cktb9cfa80017lusxd3gvf0jo"},{"post_id":"cktb9cf9u0006lusx68m0den8","tag_id":"cktb9cf9v0009lusxaz5g9aru","_id":"cktb9cfaa001clusxe8n18xhy"},{"post_id":"cktb9cf9u0006lusx68m0den8","tag_id":"cktb9cfa80018lusx7z8f34j8","_id":"cktb9cfaa001dlusxgp2x89wn"},{"post_id":"cktb9cf9v0007lusx9rd40ayc","tag_id":"cktb9cf9v0009lusxaz5g9aru","_id":"cktb9cfaa001glusx5dw1gmna"},{"post_id":"cktb9cf9w000blusxchmd55kl","tag_id":"cktb9cf9v0009lusxaz5g9aru","_id":"cktb9cfab001jlusxhhutcpns"},{"post_id":"cktb9cf9w000blusxchmd55kl","tag_id":"cktb9cfaa001flusx9kkcgatf","_id":"cktb9cfab001klusx03574g3m"},{"post_id":"cktb9cf9x000clusxa5fqfnh7","tag_id":"cktb9cfa80018lusx7z8f34j8","_id":"cktb9cfad001qlusxc84kf9zv"},{"post_id":"cktb9cf9x000clusxa5fqfnh7","tag_id":"cktb9cfab001llusxbdz2c51e","_id":"cktb9cfad001rlusx3b9zbmfc"},{"post_id":"cktb9cf9z000glusxbalbfvd0","tag_id":"cktb9cfac001olusxe5a60hi5","_id":"cktb9cfae001zlusxb3bhbagh"},{"post_id":"cktb9cf9z000glusxbalbfvd0","tag_id":"cktb9cfad001tlusx6rem4ba2","_id":"cktb9cfae0021lusx9ebi45kl"},{"post_id":"cktb9cfa1000hlusxhsszef5w","tag_id":"cktb9cfae001xlusx69oh5hnb","_id":"cktb9cfah0027lusx12hwbloh"},{"post_id":"cktb9cfa1000hlusxhsszef5w","tag_id":"cktb9cfae0023lusxcmpd9mou","_id":"cktb9cfah0029lusx5pwbf5pm"},{"post_id":"cktb9cfa2000klusx9ftw22to","tag_id":"cktb9cfaf0026lusx6wnx9j6l","_id":"cktb9cfai002clusxh9fee6gd"},{"post_id":"cktb9cfa2000klusx9ftw22to","tag_id":"cktb9cfah002alusx5i0bgjrm","_id":"cktb9cfai002dlusx0o7sc958"},{"post_id":"cktb9cfa4000plusxbf1j2dwe","tag_id":"cktb9cfai002blusx76mu6cyk","_id":"cktb9cfai002flusx7wxzffsi"},{"post_id":"cktb9cfa4000plusxbf1j2dwe","tag_id":"cktb9cfad001tlusx6rem4ba2","_id":"cktb9cfaj002glusx129c0x0y"}],"Tag":[{"name":"git","_id":"cktb9cf9s0004lusxezisb7ft"},{"name":"golang","_id":"cktb9cf9v0009lusxaz5g9aru"},{"name":"go-micro","_id":"cktb9cf9y000flusxd6uweoz8"},{"name":"微服务","_id":"cktb9cfa2000jlusxea7w1f6b"},{"name":"注意事项","_id":"cktb9cfa4000olusx6dtn84c8"},{"name":"future","_id":"cktb9cfa7000xlusxcqpzfccc"},{"name":"http","_id":"cktb9cfa80018lusx7z8f34j8"},{"name":"gorm","_id":"cktb9cfaa001flusx9kkcgatf"},{"name":"web","_id":"cktb9cfab001llusxbdz2c51e"},{"name":"markdown","_id":"cktb9cfac001olusxe5a60hi5"},{"name":"api","_id":"cktb9cfad001tlusx6rem4ba2"},{"name":"mysql","_id":"cktb9cfae001xlusx69oh5hnb"},{"name":"function","_id":"cktb9cfae0023lusxcmpd9mou"},{"name":"regex","_id":"cktb9cfaf0026lusx6wnx9j6l"},{"name":"python","_id":"cktb9cfah002alusx5i0bgjrm"},{"name":"site","_id":"cktb9cfai002blusx76mu6cyk"}]}}